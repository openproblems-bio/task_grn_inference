#!/usr/bin/env bash

# granie build_main
# 
# This wrapper script is auto-generated by viash 0.9.1 and is thus a derivative
# work thereof. This software comes with ABSOLUTELY NO WARRANTY from Data
# Intuitive.
# 
# The component may contain files which fall under a different license. The
# authors of this component should specify the license in the header of such
# files, or include a separate license file detailing the licenses of all included
# files.

set -e

if [ -z "$VIASH_TEMP" ]; then
  VIASH_TEMP=${VIASH_TEMP:-$VIASH_TMPDIR}
  VIASH_TEMP=${VIASH_TEMP:-$VIASH_TEMPDIR}
  VIASH_TEMP=${VIASH_TEMP:-$VIASH_TMP}
  VIASH_TEMP=${VIASH_TEMP:-$TMPDIR}
  VIASH_TEMP=${VIASH_TEMP:-$TMP}
  VIASH_TEMP=${VIASH_TEMP:-$TEMPDIR}
  VIASH_TEMP=${VIASH_TEMP:-$TEMP}
  VIASH_TEMP=${VIASH_TEMP:-/tmp}
fi

# define helper functions
# ViashQuote: put quotes around non flag values
# $1     : unquoted string
# return : possibly quoted string
# examples:
#   ViashQuote --foo      # returns --foo
#   ViashQuote bar        # returns 'bar'
#   Viashquote --foo=bar  # returns --foo='bar'
function ViashQuote {
  if [[ "$1" =~ ^-+[a-zA-Z0-9_\-]+=.+$ ]]; then
    echo "$1" | sed "s#=\(.*\)#='\1'#"
  elif [[ "$1" =~ ^-+[a-zA-Z0-9_\-]+$ ]]; then
    echo "$1"
  else
    echo "'$1'"
  fi
}
# ViashRemoveFlags: Remove leading flag
# $1     : string with a possible leading flag
# return : string without possible leading flag
# examples:
#   ViashRemoveFlags --foo=bar  # returns bar
function ViashRemoveFlags {
  echo "$1" | sed 's/^--*[a-zA-Z0-9_\-]*=//'
}
# ViashSourceDir: return the path of a bash file, following symlinks
# usage   : ViashSourceDir ${BASH_SOURCE[0]}
# $1      : Should always be set to ${BASH_SOURCE[0]}
# returns : The absolute path of the bash file
function ViashSourceDir {
  local source="$1"
  while [ -h "$source" ]; do
    local dir="$( cd -P "$( dirname "$source" )" >/dev/null 2>&1 && pwd )"
    source="$(readlink "$source")"
    [[ $source != /* ]] && source="$dir/$source"
  done
  cd -P "$( dirname "$source" )" >/dev/null 2>&1 && pwd
}
# ViashFindTargetDir: return the path of the '.build.yaml' file, following symlinks
# usage   : ViashFindTargetDir 'ScriptPath'
# $1      : The location from where to start the upward search
# returns : The absolute path of the '.build.yaml' file
function ViashFindTargetDir {
  local source="$1"
  while [[ "$source" != "" && ! -e "$source/.build.yaml" ]]; do
    source=${source%/*}
  done
  echo $source
}
# see https://en.wikipedia.org/wiki/Syslog#Severity_level
VIASH_LOGCODE_EMERGENCY=0
VIASH_LOGCODE_ALERT=1
VIASH_LOGCODE_CRITICAL=2
VIASH_LOGCODE_ERROR=3
VIASH_LOGCODE_WARNING=4
VIASH_LOGCODE_NOTICE=5
VIASH_LOGCODE_INFO=6
VIASH_LOGCODE_DEBUG=7
VIASH_VERBOSITY=$VIASH_LOGCODE_NOTICE

# ViashLog: Log events depending on the verbosity level
# usage: ViashLog 1 alert Oh no something went wrong!
# $1: required verbosity level
# $2: display tag
# $3+: messages to display
# stdout: Your input, prepended by '[$2] '.
function ViashLog {
  local required_level="$1"
  local display_tag="$2"
  shift 2
  if [ $VIASH_VERBOSITY -ge $required_level ]; then
    >&2 echo "[$display_tag]" "$@"
  fi
}

# ViashEmergency: log events when the system is unstable
# usage: ViashEmergency Oh no something went wrong.
# stdout: Your input, prepended by '[emergency] '.
function ViashEmergency {
  ViashLog $VIASH_LOGCODE_EMERGENCY emergency "$@"
}

# ViashAlert: log events when actions must be taken immediately (e.g. corrupted system database)
# usage: ViashAlert Oh no something went wrong.
# stdout: Your input, prepended by '[alert] '.
function ViashAlert {
  ViashLog $VIASH_LOGCODE_ALERT alert "$@"
}

# ViashCritical: log events when a critical condition occurs
# usage: ViashCritical Oh no something went wrong.
# stdout: Your input, prepended by '[critical] '.
function ViashCritical {
  ViashLog $VIASH_LOGCODE_CRITICAL critical "$@"
}

# ViashError: log events when an error condition occurs
# usage: ViashError Oh no something went wrong.
# stdout: Your input, prepended by '[error] '.
function ViashError {
  ViashLog $VIASH_LOGCODE_ERROR error "$@"
}

# ViashWarning: log potentially abnormal events
# usage: ViashWarning Something may have gone wrong.
# stdout: Your input, prepended by '[warning] '.
function ViashWarning {
  ViashLog $VIASH_LOGCODE_WARNING warning "$@"
}

# ViashNotice: log significant but normal events
# usage: ViashNotice This just happened.
# stdout: Your input, prepended by '[notice] '.
function ViashNotice {
  ViashLog $VIASH_LOGCODE_NOTICE notice "$@"
}

# ViashInfo: log normal events
# usage: ViashInfo This just happened.
# stdout: Your input, prepended by '[info] '.
function ViashInfo {
  ViashLog $VIASH_LOGCODE_INFO info "$@"
}

# ViashDebug: log all events, for debugging purposes
# usage: ViashDebug This just happened.
# stdout: Your input, prepended by '[debug] '.
function ViashDebug {
  ViashLog $VIASH_LOGCODE_DEBUG debug "$@"
}

# find source folder of this component
VIASH_META_RESOURCES_DIR=`ViashSourceDir ${BASH_SOURCE[0]}`

# find the root of the built components & dependencies
VIASH_TARGET_DIR=`ViashFindTargetDir $VIASH_META_RESOURCES_DIR`

# define meta fields
VIASH_META_NAME="granie"
VIASH_META_FUNCTIONALITY_NAME="granie"
VIASH_META_EXECUTABLE="$VIASH_META_RESOURCES_DIR/$VIASH_META_NAME"
VIASH_META_CONFIG="$VIASH_META_RESOURCES_DIR/.config.vsh.yaml"
VIASH_META_TEMP_DIR="$VIASH_TEMP"



# initialise variables
VIASH_MODE='run'
VIASH_ENGINE_ID='docker'

######## Helper functions for setting up Docker images for viash ########
# expects: ViashDockerBuild

# ViashDockerInstallationCheck: check whether Docker is installed correctly
#
# examples:
#   ViashDockerInstallationCheck
function ViashDockerInstallationCheck {
  ViashDebug "Checking whether Docker is installed"
  if [ ! command -v docker &> /dev/null ]; then
    ViashCritical "Docker doesn't seem to be installed. See 'https://docs.docker.com/get-docker/' for instructions."
    exit 1
  fi

  ViashDebug "Checking whether the Docker daemon is running"
  local save=$-; set +e
  local docker_version=$(docker version --format '{{.Client.APIVersion}}' 2> /dev/null)
  local out=$?
  [[ $save =~ e ]] && set -e
  if [ $out -ne 0 ]; then
    ViashCritical "Docker daemon does not seem to be running. Try one of the following:"
    ViashCritical "- Try running 'dockerd' in the command line"
    ViashCritical "- See https://docs.docker.com/config/daemon/"
    exit 1
  fi
}

# ViashDockerRemoteTagCheck: check whether a Docker image is available 
# on a remote. Assumes `docker login` has been performed, if relevant.
#
# $1                  : image identifier with format `[registry/]image[:tag]`
# exit code $?        : whether or not the image was found
# examples:
#   ViashDockerRemoteTagCheck python:latest
#   echo $?                                     # returns '0'
#   ViashDockerRemoteTagCheck sdaizudceahifu
#   echo $?                                     # returns '1'
function ViashDockerRemoteTagCheck {
  docker manifest inspect $1 > /dev/null 2> /dev/null
}

# ViashDockerLocalTagCheck: check whether a Docker image is available locally
#
# $1                  : image identifier with format `[registry/]image[:tag]`
# exit code $?        : whether or not the image was found
# examples:
#   docker pull python:latest
#   ViashDockerLocalTagCheck python:latest
#   echo $?                                     # returns '0'
#   ViashDockerLocalTagCheck sdaizudceahifu
#   echo $?                                     # returns '1'
function ViashDockerLocalTagCheck {
  [ -n "$(docker images -q $1)" ]
}

# ViashDockerPull: pull a Docker image
#
# $1                  : image identifier with format `[registry/]image[:tag]`
# exit code $?        : whether or not the image was found
# examples:
#   ViashDockerPull python:latest
#   echo $?                                     # returns '0'
#   ViashDockerPull sdaizudceahifu
#   echo $?                                     # returns '1'
function ViashDockerPull {
  ViashNotice "Checking if Docker image is available at '$1'"
  if [ $VIASH_VERBOSITY -ge $VIASH_LOGCODE_INFO ]; then
    docker pull $1 && return 0 || return 1
  else
    local save=$-; set +e
    docker pull $1 2> /dev/null > /dev/null
    local out=$?
    [[ $save =~ e ]] && set -e
    if [ $out -ne 0 ]; then
      ViashWarning "Could not pull from '$1'. Docker image doesn't exist or is not accessible."
    fi
    return $out
  fi
}

# ViashDockerPush: push a Docker image
#
# $1                  : image identifier with format `[registry/]image[:tag]`
# exit code $?        : whether or not the image was found
# examples:
#   ViashDockerPush python:latest
#   echo $?                                     # returns '0'
#   ViashDockerPush sdaizudceahifu
#   echo $?                                     # returns '1'
function ViashDockerPush {
  ViashNotice "Pushing image to '$1'"
  local save=$-; set +e
  local out
  if [ $VIASH_VERBOSITY -ge $VIASH_LOGCODE_INFO ]; then
    docker push $1
    out=$?
  else
    docker push $1 2> /dev/null > /dev/null
    out=$?
  fi
  [[ $save =~ e ]] && set -e
  if [ $out -eq 0 ]; then
    ViashNotice "Container '$1' push succeeded."
  else
    ViashError "Container '$1' push errored. You might not be logged in or have the necessary permissions."
  fi
  return $out
}

# ViashDockerPullElseBuild: pull a Docker image, else build it
#
# $1                  : image identifier with format `[registry/]image[:tag]`
# ViashDockerBuild    : a Bash function which builds a docker image, takes image identifier as argument.
# examples:
#   ViashDockerPullElseBuild mynewcomponent
function ViashDockerPullElseBuild {
  local save=$-; set +e
  ViashDockerPull $1
  local out=$?
  [[ $save =~ e ]] && set -e
  if [ $out -ne 0 ]; then
    ViashDockerBuild $@
  fi
}

# ViashDockerSetup: create a Docker image, according to specified docker setup strategy
#
# $1          : image identifier with format `[registry/]image[:tag]`
# $2          : docker setup strategy, see DockerSetupStrategy.scala
# examples:
#   ViashDockerSetup mynewcomponent alwaysbuild
function ViashDockerSetup {
  local image_id="$1"
  local setup_strategy="$2"
  if [ "$setup_strategy" == "alwaysbuild" -o "$setup_strategy" == "build" -o "$setup_strategy" == "b" ]; then
    ViashDockerBuild $image_id --no-cache $(ViashDockerBuildArgs "$engine_id")
  elif [ "$setup_strategy" == "alwayspull" -o "$setup_strategy" == "pull" -o "$setup_strategy" == "p" ]; then
    ViashDockerPull $image_id
  elif [ "$setup_strategy" == "alwayspullelsebuild" -o "$setup_strategy" == "pullelsebuild" ]; then
    ViashDockerPullElseBuild $image_id --no-cache $(ViashDockerBuildArgs "$engine_id")
  elif [ "$setup_strategy" == "alwayspullelsecachedbuild" -o "$setup_strategy" == "pullelsecachedbuild" ]; then
    ViashDockerPullElseBuild $image_id $(ViashDockerBuildArgs "$engine_id")
  elif [ "$setup_strategy" == "alwayscachedbuild" -o "$setup_strategy" == "cachedbuild" -o "$setup_strategy" == "cb" ]; then
    ViashDockerBuild $image_id $(ViashDockerBuildArgs "$engine_id")
  elif [[ "$setup_strategy" =~ ^ifneedbe ]]; then
    local save=$-; set +e
    ViashDockerLocalTagCheck $image_id
    local outCheck=$?
    [[ $save =~ e ]] && set -e
    if [ $outCheck -eq 0 ]; then
      ViashInfo "Image $image_id already exists"
    elif [ "$setup_strategy" == "ifneedbebuild" ]; then
      ViashDockerBuild $image_id --no-cache $(ViashDockerBuildArgs "$engine_id")
    elif [ "$setup_strategy" == "ifneedbecachedbuild" ]; then
      ViashDockerBuild $image_id $(ViashDockerBuildArgs "$engine_id")
    elif [ "$setup_strategy" == "ifneedbepull" ]; then
      ViashDockerPull $image_id
    elif [ "$setup_strategy" == "ifneedbepullelsebuild" ]; then
      ViashDockerPullElseBuild $image_id --no-cache $(ViashDockerBuildArgs "$engine_id")
    elif [ "$setup_strategy" == "ifneedbepullelsecachedbuild" ]; then
      ViashDockerPullElseBuild $image_id $(ViashDockerBuildArgs "$engine_id")
    else
      ViashError "Unrecognised Docker strategy: $setup_strategy"
      exit 1
    fi
  elif [ "$setup_strategy" == "push" -o "$setup_strategy" == "forcepush" -o "$setup_strategy" == "alwayspush" ]; then
    ViashDockerPush "$image_id"
  elif [ "$setup_strategy" == "pushifnotpresent" -o "$setup_strategy" == "gentlepush" -o "$setup_strategy" == "maybepush" ]; then
    local save=$-; set +e
    ViashDockerRemoteTagCheck $image_id
    local outCheck=$?
    [[ $save =~ e ]] && set -e
    if [ $outCheck -eq 0 ]; then
      ViashNotice "Container '$image_id' exists, doing nothing."
    else
      ViashNotice "Container '$image_id' does not yet exist."
      ViashDockerPush "$image_id"
    fi
  elif [ "$setup_strategy" == "donothing" -o "$setup_strategy" == "meh" ]; then
    ViashNotice "Skipping setup."
  else
    ViashError "Unrecognised Docker strategy: $setup_strategy"
    exit 1
  fi
}

# ViashDockerCheckCommands: Check whether a docker container has the required commands
#
# $1                  : image identifier with format `[registry/]image[:tag]`
# $@                  : commands to verify being present
# examples:
#   ViashDockerCheckCommands bash:4.0 bash ps foo
function ViashDockerCheckCommands {
  local image_id="$1"
  shift 1
  local commands="$@"
  local save=$-; set +e
  local missing # mark 'missing' as local in advance, otherwise the exit code of the command will be missing and always be '0'
  missing=$(docker run --rm --entrypoint=sh "$image_id" -c "for command in $commands; do command -v \$command >/dev/null 2>&1; if [ \$? -ne 0 ]; then echo \$command; exit 1; fi; done")
  local outCheck=$?
  [[ $save =~ e ]] && set -e
  if [ $outCheck -ne 0 ]; then
  	ViashError "Docker container '$image_id' does not contain command '$missing'."
  	exit 1
  fi
}

# ViashDockerBuild: build a docker image
# $1                               : image identifier with format `[registry/]image[:tag]`
# $...                             : additional arguments to pass to docker build
# $VIASH_META_TEMP_DIR             : temporary directory to store dockerfile & optional resources in
# $VIASH_META_NAME                 : name of the component
# $VIASH_META_RESOURCES_DIR        : directory containing the resources
# $VIASH_VERBOSITY                 : verbosity level
# exit code $?                     : whether or not the image was built successfully
function ViashDockerBuild {
  local image_id="$1"
  shift 1

  # create temporary directory to store dockerfile & optional resources in
  local tmpdir=$(mktemp -d "$VIASH_META_TEMP_DIR/dockerbuild-$VIASH_META_NAME-XXXXXX")
  local dockerfile="$tmpdir/Dockerfile"
  function clean_up {
    rm -rf "$tmpdir"
  }
  trap clean_up EXIT

  # store dockerfile and resources
  ViashDockerfile "$VIASH_ENGINE_ID" > "$dockerfile"

  # generate the build command
  local docker_build_cmd="docker build -t '$image_id' $@ '$VIASH_META_RESOURCES_DIR' -f '$dockerfile'"

  # build the container
  ViashNotice "Building container '$image_id' with Dockerfile"
  ViashInfo "$docker_build_cmd"
  local save=$-; set +e
  if [ $VIASH_VERBOSITY -ge $VIASH_LOGCODE_INFO ]; then
    eval $docker_build_cmd
  else
    eval $docker_build_cmd &> "$tmpdir/docker_build.log"
  fi

  # check exit code
  local out=$?
  [[ $save =~ e ]] && set -e
  if [ $out -ne 0 ]; then
    ViashError "Error occurred while building container '$image_id'"
    if [ $VIASH_VERBOSITY -lt $VIASH_LOGCODE_INFO ]; then
      ViashError "Transcript: --------------------------------"
      cat "$tmpdir/docker_build.log"
      ViashError "End of transcript --------------------------"
    fi
    exit 1
  fi
}

######## End of helper functions for setting up Docker images for viash ########

# ViashDockerFile: print the dockerfile to stdout
# $1    : engine identifier
# return : dockerfile required to run this component
# examples:
#   ViashDockerFile
function ViashDockerfile {
  local engine_id="$1"

  if [[ "$engine_id" == "docker" ]]; then
    cat << 'VIASHDOCKER'
FROM chrarnold84/granieverse:v1.3
ENTRYPOINT []
RUN Rscript -e 'options(warn = 2); if (!requireNamespace("BiocManager", quietly = TRUE)) install.packages("BiocManager")' && \
  Rscript -e 'options(warn = 2); if (!requireNamespace("reticulate", quietly = TRUE)) BiocManager::install("reticulate")' && \
  Rscript -e 'options(warn = 2); if (!requireNamespace("anndata", quietly = TRUE)) BiocManager::install("anndata")'

LABEL org.opencontainers.image.description="Companion container for running component grn_methods granie"
LABEL org.opencontainers.image.created="2025-03-27T17:03:42Z"
LABEL org.opencontainers.image.source="https://github.com/openproblems-bio/task_grn_inference"
LABEL org.opencontainers.image.revision="f0dff10e1ecf34d72ea37e00afd5d99319a7bab7"
LABEL org.opencontainers.image.version="build_main"

VIASHDOCKER
  fi
}

# ViashDockerBuildArgs: return the arguments to pass to docker build
# $1    : engine identifier
# return : arguments to pass to docker build
function ViashDockerBuildArgs {
  local engine_id="$1"

  if [[ "$engine_id" == "docker" ]]; then
    echo ""
  fi
}

# ViashAbsolutePath: generate absolute path from relative path
# borrowed from https://stackoverflow.com/a/21951256
# $1     : relative filename
# return : absolute path
# examples:
#   ViashAbsolutePath some_file.txt   # returns /path/to/some_file.txt
#   ViashAbsolutePath /foo/bar/..     # returns /foo
function ViashAbsolutePath {
  local thePath
  local parr
  local outp
  local len
  if [[ ! "$1" =~ ^/ ]]; then
    thePath="$PWD/$1"
  else
    thePath="$1"
  fi
  echo "$thePath" | (
    IFS=/
    read -a parr
    declare -a outp
    for i in "${parr[@]}"; do
      case "$i" in
      ''|.) continue ;;
      ..)
        len=${#outp[@]}
        if ((len==0)); then
          continue
        else
          unset outp[$((len-1))]
        fi
        ;;
      *)
        len=${#outp[@]}
        outp[$len]="$i"
      ;;
      esac
    done
    echo /"${outp[*]}"
  )
}
# ViashDockerAutodetectMount: auto configuring docker mounts from parameters
# $1                             : The parameter value
# returns                        : New parameter
# $VIASH_DIRECTORY_MOUNTS        : Added another parameter to be passed to docker
# $VIASH_DOCKER_AUTOMOUNT_PREFIX : The prefix to be used for the automounts
# examples:
#   ViashDockerAutodetectMount /path/to/bar      # returns '/viash_automount/path/to/bar'
#   ViashDockerAutodetectMountArg /path/to/bar   # returns '--volume="/path/to:/viash_automount/path/to"'
function ViashDockerAutodetectMount {
  local abs_path=$(ViashAbsolutePath "$1")
  local mount_source
  local base_name
  if [ -d "$abs_path" ]; then
    mount_source="$abs_path"
    base_name=""
  else
    mount_source=`dirname "$abs_path"`
    base_name=`basename "$abs_path"`
  fi
  local mount_target="$VIASH_DOCKER_AUTOMOUNT_PREFIX$mount_source"
  if [ -z "$base_name" ]; then
    echo "$mount_target"
  else
    echo "$mount_target/$base_name"
  fi
}
function ViashDockerAutodetectMountArg {
  local abs_path=$(ViashAbsolutePath "$1")
  local mount_source
  local base_name
  if [ -d "$abs_path" ]; then
    mount_source="$abs_path"
    base_name=""
  else
    mount_source=`dirname "$abs_path"`
    base_name=`basename "$abs_path"`
  fi
  local mount_target="$VIASH_DOCKER_AUTOMOUNT_PREFIX$mount_source"
  ViashDebug "ViashDockerAutodetectMountArg $1 -> $mount_source -> $mount_target"
  echo "--volume=\"$mount_source:$mount_target\""
}
function ViashDockerStripAutomount {
  local abs_path=$(ViashAbsolutePath "$1")
  echo "${abs_path#$VIASH_DOCKER_AUTOMOUNT_PREFIX}"
}
# initialise variables
VIASH_DIRECTORY_MOUNTS=()

# configure default docker automount prefix if it is unset
if [ -z "${VIASH_DOCKER_AUTOMOUNT_PREFIX+x}" ]; then
  VIASH_DOCKER_AUTOMOUNT_PREFIX="/viash_automount"
fi

# initialise docker variables
VIASH_DOCKER_RUN_ARGS=(-i --rm)


# ViashHelp: Display helpful explanation about this executable
function ViashHelp {
  echo "granie build_main"
  echo ""
  echo "Arguments:"
  echo "    --rna"
  echo "        type: file, required parameter, file must exist"
  echo "        example: resources_test/grn_benchmark/inference_data/op_rna.h5ad"
  echo ""
  echo "    --atac"
  echo "        type: file, file must exist"
  echo "        example: resources_test/grn_benchmark/inference_data/op_atac.h5ad"
  echo ""
  echo "    --prediction"
  echo "        type: file, output, file must exist"
  echo "        example: resources_test/grn_models/op/collectri.h5ad"
  echo ""
  echo "    --tf_all"
  echo "        type: file, required parameter, file must exist"
  echo "        default: resources_test/grn_benchmark/prior/tf_all.csv"
  echo "        example: resources_test/grn_benchmark/prior/tf_all.csv"
  echo ""
  echo "    --max_n_links"
  echo "        type: integer"
  echo "        default: 50000"
  echo ""
  echo "    --num_workers"
  echo "        type: integer"
  echo "        default: 20"
  echo ""
  echo "    --temp_dir"
  echo "        type: string"
  echo "        default: output/temdir"
  echo ""
  echo "    --layer"
  echo "        type: string"
  echo "        default: X_norm"
  echo ""
  echo "    --seed"
  echo "        type: integer"
  echo "        default: 32"
  echo ""
  echo "    --dataset_id"
  echo "        type: string"
  echo "        default: op"
  echo ""
  echo "    --apply_tf_methods"
  echo "        type: boolean"
  echo "        default: true"
  echo ""
  echo "    --normRNA"
  echo "        type: string"
  echo "        default: SCT"
  echo "        Normalization method for RNA data."
  echo ""
  echo "    --normATAC"
  echo "        type: string"
  echo "        default: LSI"
  echo "        Normalization method for ATAC data."
  echo ""
  echo "    --LSI_featureCutoff"
  echo "        type: string"
  echo "        default: q0"
  echo "        Feature cutoff for LSI normalization."
  echo ""
  echo "    --nDimensions_ATAC"
  echo "        type: integer"
  echo "        default: 50"
  echo "        Number of dimensions for ATAC modality"
  echo ""
  echo "    --integrationMethod"
  echo "        type: string"
  echo "        default: WNN"
  echo "        Method used for data integration."
  echo ""
  echo "    --WNN_knn"
  echo "        type: integer"
  echo "        default: 20"
  echo "        Number of nearest neighbors for WNN integration."
  echo ""
  echo "    --minCellsPerCluster"
  echo "        type: integer"
  echo "        default: 25"
  echo "        Minimum number of cells required per cluster."
  echo ""
  echo "    --preprocessing_clusteringMethod"
  echo "        type: integer"
  echo "        default: 1"
  echo "        Seurat::FindClusters: Clustering method to use (1 = original Louvain"
  echo "        algorithm, 2 = Louvain algorithm with multilevel refinement, 3 = SLM"
  echo "        algorithm, 4 = Leiden algorithm)."
  echo ""
  echo "    --preprocessing_clusterResolution"
  echo "        type: double"
  echo "        default: 14.0"
  echo "        Resolution for clustering, typically between 5 and 20."
  echo ""
  echo "    --preprocessing_RNA_nDimensions"
  echo "        type: integer"
  echo "        default: 50"
  echo "        Number of dimensions for RNA reduction, default is 50."
  echo ""
  echo "    --genomeAssembly"
  echo "        type: string"
  echo "        default: hg38"
  echo "        Genome assembly version (e.g., hg38). Currently, hg38 and mm10 is"
  echo "        supported."
  echo ""
  echo "    --GRaNIE_corMethod"
  echo "        type: string"
  echo "        default: spearman"
  echo "        Correlation method used in GRaNIE (e.g., 'spearman')."
  echo ""
  echo "    --GRaNIE_includeSexChr"
  echo "        type: boolean"
  echo "        default: true"
  echo "        Include sex chromosomes in analysis."
  echo ""
  echo "    --GRaNIE_promoterRange"
  echo "        type: integer"
  echo "        default: 250000"
  echo "        Range in base pairs for maximum distance of peak-gene connections"
  echo "        (default is 250000)."
  echo ""
  echo "    --GRaNIE_TF_peak_fdr_threshold"
  echo "        type: double"
  echo "        default: 0.2"
  echo "        FDR threshold for TF-peak connections (default is 0.2)."
  echo ""
  echo "    --GRaNIE_peak_gene_fdr_threshold"
  echo "        type: double"
  echo "        default: 0.2"
  echo "        FDR threshold for peak-gene connections (default is 0.2)."
  echo ""
  echo "    --useWeightingLinks"
  echo "        type: boolean"
  echo "        default: false"
  echo "        Flag to indicate whether to use weighting links in analysis."
  echo ""
  echo "    --forceRerun"
  echo "        type: boolean"
  echo "        default: true"
  echo "        Flag to force rerun of the analysis regardless of existing results."
  echo ""
  echo "    --subset"
  echo "        type: boolean"
  echo "        default: false"
  echo "        Flag for testing purposes to subset the data for faster running times"
  echo ""
  echo "Viash built in Computational Requirements:"
  echo "    ---cpus=INT"
  echo "        Number of CPUs to use"
  echo "    ---memory=STRING"
  echo "        Amount of memory to use. Examples: 4GB, 3MiB."
  echo ""
  echo "Viash built in Docker:"
  echo "    ---setup=STRATEGY"
  echo "        Setup the docker container. Options are: alwaysbuild, alwayscachedbuild, ifneedbebuild, ifneedbecachedbuild, alwayspull, alwayspullelsebuild, alwayspullelsecachedbuild, ifneedbepull, ifneedbepullelsebuild, ifneedbepullelsecachedbuild, push, pushifnotpresent, donothing."
  echo "        Default: ifneedbepullelsecachedbuild"
  echo "    ---dockerfile"
  echo "        Print the dockerfile to stdout."
  echo "    ---docker_run_args=ARG"
  echo "        Provide runtime arguments to Docker. See the documentation on \`docker run\` for more information."
  echo "    ---docker_image_id"
  echo "        Print the docker image id to stdout."
  echo "    ---debug"
  echo "        Enter the docker container for debugging purposes."
  echo ""
  echo "Viash built in Engines:"
  echo "    ---engine=ENGINE_ID"
  echo "        Specify the engine to use. Options are: docker, native."
  echo "        Default: docker"
}

# initialise array
VIASH_POSITIONAL_ARGS=''

while [[ $# -gt 0 ]]; do
    case "$1" in
        -h|--help)
            ViashHelp
            exit
            ;;
        ---v|---verbose)
            let "VIASH_VERBOSITY=VIASH_VERBOSITY+1"
            shift 1
            ;;
        ---verbosity)
            VIASH_VERBOSITY="$2"
            shift 2
            ;;
        ---verbosity=*)
            VIASH_VERBOSITY="$(ViashRemoveFlags "$1")"
            shift 1
            ;;
        --version)
            echo "granie build_main"
            exit
            ;;
        --rna)
            [ -n "$VIASH_PAR_RNA" ] && ViashError Bad arguments for option \'--rna\': \'$VIASH_PAR_RNA\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_RNA="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to --rna. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        --rna=*)
            [ -n "$VIASH_PAR_RNA" ] && ViashError Bad arguments for option \'--rna=*\': \'$VIASH_PAR_RNA\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_RNA=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --atac)
            [ -n "$VIASH_PAR_ATAC" ] && ViashError Bad arguments for option \'--atac\': \'$VIASH_PAR_ATAC\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_ATAC="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to --atac. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        --atac=*)
            [ -n "$VIASH_PAR_ATAC" ] && ViashError Bad arguments for option \'--atac=*\': \'$VIASH_PAR_ATAC\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_ATAC=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --prediction)
            [ -n "$VIASH_PAR_PREDICTION" ] && ViashError Bad arguments for option \'--prediction\': \'$VIASH_PAR_PREDICTION\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_PREDICTION="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to --prediction. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        --prediction=*)
            [ -n "$VIASH_PAR_PREDICTION" ] && ViashError Bad arguments for option \'--prediction=*\': \'$VIASH_PAR_PREDICTION\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_PREDICTION=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --tf_all)
            [ -n "$VIASH_PAR_TF_ALL" ] && ViashError Bad arguments for option \'--tf_all\': \'$VIASH_PAR_TF_ALL\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_TF_ALL="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to --tf_all. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        --tf_all=*)
            [ -n "$VIASH_PAR_TF_ALL" ] && ViashError Bad arguments for option \'--tf_all=*\': \'$VIASH_PAR_TF_ALL\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_TF_ALL=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --max_n_links)
            [ -n "$VIASH_PAR_MAX_N_LINKS" ] && ViashError Bad arguments for option \'--max_n_links\': \'$VIASH_PAR_MAX_N_LINKS\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_MAX_N_LINKS="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to --max_n_links. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        --max_n_links=*)
            [ -n "$VIASH_PAR_MAX_N_LINKS" ] && ViashError Bad arguments for option \'--max_n_links=*\': \'$VIASH_PAR_MAX_N_LINKS\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_MAX_N_LINKS=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --num_workers)
            [ -n "$VIASH_PAR_NUM_WORKERS" ] && ViashError Bad arguments for option \'--num_workers\': \'$VIASH_PAR_NUM_WORKERS\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_NUM_WORKERS="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to --num_workers. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        --num_workers=*)
            [ -n "$VIASH_PAR_NUM_WORKERS" ] && ViashError Bad arguments for option \'--num_workers=*\': \'$VIASH_PAR_NUM_WORKERS\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_NUM_WORKERS=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --temp_dir)
            [ -n "$VIASH_PAR_TEMP_DIR" ] && ViashError Bad arguments for option \'--temp_dir\': \'$VIASH_PAR_TEMP_DIR\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_TEMP_DIR="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to --temp_dir. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        --temp_dir=*)
            [ -n "$VIASH_PAR_TEMP_DIR" ] && ViashError Bad arguments for option \'--temp_dir=*\': \'$VIASH_PAR_TEMP_DIR\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_TEMP_DIR=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --layer)
            [ -n "$VIASH_PAR_LAYER" ] && ViashError Bad arguments for option \'--layer\': \'$VIASH_PAR_LAYER\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_LAYER="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to --layer. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        --layer=*)
            [ -n "$VIASH_PAR_LAYER" ] && ViashError Bad arguments for option \'--layer=*\': \'$VIASH_PAR_LAYER\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_LAYER=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --seed)
            [ -n "$VIASH_PAR_SEED" ] && ViashError Bad arguments for option \'--seed\': \'$VIASH_PAR_SEED\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_SEED="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to --seed. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        --seed=*)
            [ -n "$VIASH_PAR_SEED" ] && ViashError Bad arguments for option \'--seed=*\': \'$VIASH_PAR_SEED\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_SEED=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --dataset_id)
            [ -n "$VIASH_PAR_DATASET_ID" ] && ViashError Bad arguments for option \'--dataset_id\': \'$VIASH_PAR_DATASET_ID\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_DATASET_ID="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to --dataset_id. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        --dataset_id=*)
            [ -n "$VIASH_PAR_DATASET_ID" ] && ViashError Bad arguments for option \'--dataset_id=*\': \'$VIASH_PAR_DATASET_ID\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_DATASET_ID=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --apply_tf_methods)
            [ -n "$VIASH_PAR_APPLY_TF_METHODS" ] && ViashError Bad arguments for option \'--apply_tf_methods\': \'$VIASH_PAR_APPLY_TF_METHODS\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_APPLY_TF_METHODS="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to --apply_tf_methods. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        --apply_tf_methods=*)
            [ -n "$VIASH_PAR_APPLY_TF_METHODS" ] && ViashError Bad arguments for option \'--apply_tf_methods=*\': \'$VIASH_PAR_APPLY_TF_METHODS\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_APPLY_TF_METHODS=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --normRNA)
            [ -n "$VIASH_PAR_NORMRNA" ] && ViashError Bad arguments for option \'--normRNA\': \'$VIASH_PAR_NORMRNA\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_NORMRNA="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to --normRNA. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        --normRNA=*)
            [ -n "$VIASH_PAR_NORMRNA" ] && ViashError Bad arguments for option \'--normRNA=*\': \'$VIASH_PAR_NORMRNA\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_NORMRNA=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --normATAC)
            [ -n "$VIASH_PAR_NORMATAC" ] && ViashError Bad arguments for option \'--normATAC\': \'$VIASH_PAR_NORMATAC\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_NORMATAC="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to --normATAC. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        --normATAC=*)
            [ -n "$VIASH_PAR_NORMATAC" ] && ViashError Bad arguments for option \'--normATAC=*\': \'$VIASH_PAR_NORMATAC\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_NORMATAC=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --LSI_featureCutoff)
            [ -n "$VIASH_PAR_LSI_FEATURECUTOFF" ] && ViashError Bad arguments for option \'--LSI_featureCutoff\': \'$VIASH_PAR_LSI_FEATURECUTOFF\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_LSI_FEATURECUTOFF="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to --LSI_featureCutoff. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        --LSI_featureCutoff=*)
            [ -n "$VIASH_PAR_LSI_FEATURECUTOFF" ] && ViashError Bad arguments for option \'--LSI_featureCutoff=*\': \'$VIASH_PAR_LSI_FEATURECUTOFF\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_LSI_FEATURECUTOFF=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --nDimensions_ATAC)
            [ -n "$VIASH_PAR_NDIMENSIONS_ATAC" ] && ViashError Bad arguments for option \'--nDimensions_ATAC\': \'$VIASH_PAR_NDIMENSIONS_ATAC\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_NDIMENSIONS_ATAC="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to --nDimensions_ATAC. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        --nDimensions_ATAC=*)
            [ -n "$VIASH_PAR_NDIMENSIONS_ATAC" ] && ViashError Bad arguments for option \'--nDimensions_ATAC=*\': \'$VIASH_PAR_NDIMENSIONS_ATAC\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_NDIMENSIONS_ATAC=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --integrationMethod)
            [ -n "$VIASH_PAR_INTEGRATIONMETHOD" ] && ViashError Bad arguments for option \'--integrationMethod\': \'$VIASH_PAR_INTEGRATIONMETHOD\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_INTEGRATIONMETHOD="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to --integrationMethod. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        --integrationMethod=*)
            [ -n "$VIASH_PAR_INTEGRATIONMETHOD" ] && ViashError Bad arguments for option \'--integrationMethod=*\': \'$VIASH_PAR_INTEGRATIONMETHOD\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_INTEGRATIONMETHOD=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --WNN_knn)
            [ -n "$VIASH_PAR_WNN_KNN" ] && ViashError Bad arguments for option \'--WNN_knn\': \'$VIASH_PAR_WNN_KNN\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_WNN_KNN="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to --WNN_knn. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        --WNN_knn=*)
            [ -n "$VIASH_PAR_WNN_KNN" ] && ViashError Bad arguments for option \'--WNN_knn=*\': \'$VIASH_PAR_WNN_KNN\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_WNN_KNN=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --minCellsPerCluster)
            [ -n "$VIASH_PAR_MINCELLSPERCLUSTER" ] && ViashError Bad arguments for option \'--minCellsPerCluster\': \'$VIASH_PAR_MINCELLSPERCLUSTER\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_MINCELLSPERCLUSTER="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to --minCellsPerCluster. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        --minCellsPerCluster=*)
            [ -n "$VIASH_PAR_MINCELLSPERCLUSTER" ] && ViashError Bad arguments for option \'--minCellsPerCluster=*\': \'$VIASH_PAR_MINCELLSPERCLUSTER\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_MINCELLSPERCLUSTER=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --preprocessing_clusteringMethod)
            [ -n "$VIASH_PAR_PREPROCESSING_CLUSTERINGMETHOD" ] && ViashError Bad arguments for option \'--preprocessing_clusteringMethod\': \'$VIASH_PAR_PREPROCESSING_CLUSTERINGMETHOD\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_PREPROCESSING_CLUSTERINGMETHOD="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to --preprocessing_clusteringMethod. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        --preprocessing_clusteringMethod=*)
            [ -n "$VIASH_PAR_PREPROCESSING_CLUSTERINGMETHOD" ] && ViashError Bad arguments for option \'--preprocessing_clusteringMethod=*\': \'$VIASH_PAR_PREPROCESSING_CLUSTERINGMETHOD\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_PREPROCESSING_CLUSTERINGMETHOD=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --preprocessing_clusterResolution)
            [ -n "$VIASH_PAR_PREPROCESSING_CLUSTERRESOLUTION" ] && ViashError Bad arguments for option \'--preprocessing_clusterResolution\': \'$VIASH_PAR_PREPROCESSING_CLUSTERRESOLUTION\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_PREPROCESSING_CLUSTERRESOLUTION="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to --preprocessing_clusterResolution. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        --preprocessing_clusterResolution=*)
            [ -n "$VIASH_PAR_PREPROCESSING_CLUSTERRESOLUTION" ] && ViashError Bad arguments for option \'--preprocessing_clusterResolution=*\': \'$VIASH_PAR_PREPROCESSING_CLUSTERRESOLUTION\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_PREPROCESSING_CLUSTERRESOLUTION=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --preprocessing_RNA_nDimensions)
            [ -n "$VIASH_PAR_PREPROCESSING_RNA_NDIMENSIONS" ] && ViashError Bad arguments for option \'--preprocessing_RNA_nDimensions\': \'$VIASH_PAR_PREPROCESSING_RNA_NDIMENSIONS\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_PREPROCESSING_RNA_NDIMENSIONS="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to --preprocessing_RNA_nDimensions. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        --preprocessing_RNA_nDimensions=*)
            [ -n "$VIASH_PAR_PREPROCESSING_RNA_NDIMENSIONS" ] && ViashError Bad arguments for option \'--preprocessing_RNA_nDimensions=*\': \'$VIASH_PAR_PREPROCESSING_RNA_NDIMENSIONS\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_PREPROCESSING_RNA_NDIMENSIONS=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --genomeAssembly)
            [ -n "$VIASH_PAR_GENOMEASSEMBLY" ] && ViashError Bad arguments for option \'--genomeAssembly\': \'$VIASH_PAR_GENOMEASSEMBLY\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_GENOMEASSEMBLY="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to --genomeAssembly. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        --genomeAssembly=*)
            [ -n "$VIASH_PAR_GENOMEASSEMBLY" ] && ViashError Bad arguments for option \'--genomeAssembly=*\': \'$VIASH_PAR_GENOMEASSEMBLY\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_GENOMEASSEMBLY=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --GRaNIE_corMethod)
            [ -n "$VIASH_PAR_GRANIE_CORMETHOD" ] && ViashError Bad arguments for option \'--GRaNIE_corMethod\': \'$VIASH_PAR_GRANIE_CORMETHOD\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_GRANIE_CORMETHOD="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to --GRaNIE_corMethod. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        --GRaNIE_corMethod=*)
            [ -n "$VIASH_PAR_GRANIE_CORMETHOD" ] && ViashError Bad arguments for option \'--GRaNIE_corMethod=*\': \'$VIASH_PAR_GRANIE_CORMETHOD\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_GRANIE_CORMETHOD=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --GRaNIE_includeSexChr)
            [ -n "$VIASH_PAR_GRANIE_INCLUDESEXCHR" ] && ViashError Bad arguments for option \'--GRaNIE_includeSexChr\': \'$VIASH_PAR_GRANIE_INCLUDESEXCHR\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_GRANIE_INCLUDESEXCHR="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to --GRaNIE_includeSexChr. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        --GRaNIE_includeSexChr=*)
            [ -n "$VIASH_PAR_GRANIE_INCLUDESEXCHR" ] && ViashError Bad arguments for option \'--GRaNIE_includeSexChr=*\': \'$VIASH_PAR_GRANIE_INCLUDESEXCHR\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_GRANIE_INCLUDESEXCHR=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --GRaNIE_promoterRange)
            [ -n "$VIASH_PAR_GRANIE_PROMOTERRANGE" ] && ViashError Bad arguments for option \'--GRaNIE_promoterRange\': \'$VIASH_PAR_GRANIE_PROMOTERRANGE\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_GRANIE_PROMOTERRANGE="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to --GRaNIE_promoterRange. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        --GRaNIE_promoterRange=*)
            [ -n "$VIASH_PAR_GRANIE_PROMOTERRANGE" ] && ViashError Bad arguments for option \'--GRaNIE_promoterRange=*\': \'$VIASH_PAR_GRANIE_PROMOTERRANGE\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_GRANIE_PROMOTERRANGE=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --GRaNIE_TF_peak_fdr_threshold)
            [ -n "$VIASH_PAR_GRANIE_TF_PEAK_FDR_THRESHOLD" ] && ViashError Bad arguments for option \'--GRaNIE_TF_peak_fdr_threshold\': \'$VIASH_PAR_GRANIE_TF_PEAK_FDR_THRESHOLD\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_GRANIE_TF_PEAK_FDR_THRESHOLD="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to --GRaNIE_TF_peak_fdr_threshold. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        --GRaNIE_TF_peak_fdr_threshold=*)
            [ -n "$VIASH_PAR_GRANIE_TF_PEAK_FDR_THRESHOLD" ] && ViashError Bad arguments for option \'--GRaNIE_TF_peak_fdr_threshold=*\': \'$VIASH_PAR_GRANIE_TF_PEAK_FDR_THRESHOLD\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_GRANIE_TF_PEAK_FDR_THRESHOLD=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --GRaNIE_peak_gene_fdr_threshold)
            [ -n "$VIASH_PAR_GRANIE_PEAK_GENE_FDR_THRESHOLD" ] && ViashError Bad arguments for option \'--GRaNIE_peak_gene_fdr_threshold\': \'$VIASH_PAR_GRANIE_PEAK_GENE_FDR_THRESHOLD\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_GRANIE_PEAK_GENE_FDR_THRESHOLD="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to --GRaNIE_peak_gene_fdr_threshold. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        --GRaNIE_peak_gene_fdr_threshold=*)
            [ -n "$VIASH_PAR_GRANIE_PEAK_GENE_FDR_THRESHOLD" ] && ViashError Bad arguments for option \'--GRaNIE_peak_gene_fdr_threshold=*\': \'$VIASH_PAR_GRANIE_PEAK_GENE_FDR_THRESHOLD\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_GRANIE_PEAK_GENE_FDR_THRESHOLD=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --useWeightingLinks)
            [ -n "$VIASH_PAR_USEWEIGHTINGLINKS" ] && ViashError Bad arguments for option \'--useWeightingLinks\': \'$VIASH_PAR_USEWEIGHTINGLINKS\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_USEWEIGHTINGLINKS="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to --useWeightingLinks. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        --useWeightingLinks=*)
            [ -n "$VIASH_PAR_USEWEIGHTINGLINKS" ] && ViashError Bad arguments for option \'--useWeightingLinks=*\': \'$VIASH_PAR_USEWEIGHTINGLINKS\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_USEWEIGHTINGLINKS=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --forceRerun)
            [ -n "$VIASH_PAR_FORCERERUN" ] && ViashError Bad arguments for option \'--forceRerun\': \'$VIASH_PAR_FORCERERUN\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_FORCERERUN="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to --forceRerun. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        --forceRerun=*)
            [ -n "$VIASH_PAR_FORCERERUN" ] && ViashError Bad arguments for option \'--forceRerun=*\': \'$VIASH_PAR_FORCERERUN\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_FORCERERUN=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --subset)
            [ -n "$VIASH_PAR_SUBSET" ] && ViashError Bad arguments for option \'--subset\': \'$VIASH_PAR_SUBSET\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_SUBSET="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to --subset. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        --subset=*)
            [ -n "$VIASH_PAR_SUBSET" ] && ViashError Bad arguments for option \'--subset=*\': \'$VIASH_PAR_SUBSET\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_SUBSET=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        ---engine)
            VIASH_ENGINE_ID="$2"
            shift 2
            ;;
        ---engine=*)
            VIASH_ENGINE_ID="$(ViashRemoveFlags "$1")"
            shift 1
            ;;
        ---setup)
            VIASH_MODE='setup'
            VIASH_SETUP_STRATEGY="$2"
            shift 2
            ;;
        ---setup=*)
            VIASH_MODE='setup'
            VIASH_SETUP_STRATEGY="$(ViashRemoveFlags "$1")"
            shift 1
            ;;
        ---dockerfile)
            VIASH_MODE='dockerfile'
            shift 1
            ;;
        ---docker_run_args)
            VIASH_DOCKER_RUN_ARGS+=("$2")
            shift 2
            ;;
        ---docker_run_args=*)
            VIASH_DOCKER_RUN_ARGS+=("$(ViashRemoveFlags "$1")")
            shift 1
            ;;
        ---docker_image_id)
            VIASH_MODE='docker_image_id'
            shift 1
            ;;
        ---debug)
            VIASH_MODE='debug'
            shift 1
            ;;
        ---cpus)
            [ -n "$VIASH_META_CPUS" ] && ViashError Bad arguments for option \'---cpus\': \'$VIASH_META_CPUS\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_META_CPUS="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to ---cpus. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        ---cpus=*)
            [ -n "$VIASH_META_CPUS" ] && ViashError Bad arguments for option \'---cpus=*\': \'$VIASH_META_CPUS\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_META_CPUS=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        ---memory)
            [ -n "$VIASH_META_MEMORY" ] && ViashError Bad arguments for option \'---memory\': \'$VIASH_META_MEMORY\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_META_MEMORY="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to ---memory. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        ---memory=*)
            [ -n "$VIASH_META_MEMORY" ] && ViashError Bad arguments for option \'---memory=*\': \'$VIASH_META_MEMORY\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_META_MEMORY=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        *)  # positional arg or unknown option
            # since the positional args will be eval'd, can we always quote, instead of using ViashQuote
            VIASH_POSITIONAL_ARGS="$VIASH_POSITIONAL_ARGS '$1'"
            [[ $1 == -* ]] && ViashWarning $1 looks like a parameter but is not a defined parameter and will instead be treated as a positional argument. Use "--help" to get more information on the parameters.
            shift # past argument
            ;;
    esac
done

# parse positional parameters
eval set -- $VIASH_POSITIONAL_ARGS


if   [ "$VIASH_ENGINE_ID" == "native" ]  ; then
  VIASH_ENGINE_TYPE='native'
elif   [ "$VIASH_ENGINE_ID" == "docker" ]  ; then
  VIASH_ENGINE_TYPE='docker'
else
  ViashError "Engine '$VIASH_ENGINE_ID' is not recognized. Options are: docker, native."
  exit 1
fi

if [[ "$VIASH_ENGINE_TYPE" == "docker" ]]; then
  # check if docker is installed properly
  ViashDockerInstallationCheck

  # determine docker image id
  if [[ "$VIASH_ENGINE_ID" == 'docker' ]]; then
    VIASH_DOCKER_IMAGE_ID='ghcr.io/openproblems-bio/task_grn_inference/grn_methods/granie:build_main'
  fi

  # print dockerfile
  if [ "$VIASH_MODE" == "dockerfile" ]; then
    ViashDockerfile "$VIASH_ENGINE_ID"
    exit 0

  elif [ "$VIASH_MODE" == "docker_image_id" ]; then
    echo "$VIASH_DOCKER_IMAGE_ID"
    exit 0
  
  # enter docker container
  elif [[ "$VIASH_MODE" == "debug" ]]; then
    VIASH_CMD="docker run --entrypoint=bash ${VIASH_DOCKER_RUN_ARGS[@]} -v '$(pwd)':/pwd --workdir /pwd -t $VIASH_DOCKER_IMAGE_ID"
    ViashNotice "+ $VIASH_CMD"
    eval $VIASH_CMD
    exit 

  # build docker image
  elif [ "$VIASH_MODE" == "setup" ]; then
    ViashDockerSetup "$VIASH_DOCKER_IMAGE_ID" "$VIASH_SETUP_STRATEGY"
    ViashDockerCheckCommands "$VIASH_DOCKER_IMAGE_ID" 'bash'
    exit 0
  fi

  # check if docker image exists
  ViashDockerSetup "$VIASH_DOCKER_IMAGE_ID" ifneedbepullelsecachedbuild
  ViashDockerCheckCommands "$VIASH_DOCKER_IMAGE_ID" 'bash'
fi

# setting computational defaults

# helper function for parsing memory strings
function ViashMemoryAsBytes {
  local memory=`echo "$1" | tr '[:upper:]' '[:lower:]' | tr -d '[:space:]'`
  local memory_regex='^([0-9]+)([kmgtp]i?b?|b)$'
  if [[ $memory =~ $memory_regex ]]; then
    local number=${memory/[^0-9]*/}
    local symbol=${memory/*[0-9]/}
    
    case $symbol in
      b)      memory_b=$number ;;
      kb|k)   memory_b=$(( $number * 1000 )) ;;
      mb|m)   memory_b=$(( $number * 1000 * 1000 )) ;;
      gb|g)   memory_b=$(( $number * 1000 * 1000 * 1000 )) ;;
      tb|t)   memory_b=$(( $number * 1000 * 1000 * 1000 * 1000 )) ;;
      pb|p)   memory_b=$(( $number * 1000 * 1000 * 1000 * 1000 * 1000 )) ;;
      kib|ki)   memory_b=$(( $number * 1024 )) ;;
      mib|mi)   memory_b=$(( $number * 1024 * 1024 )) ;;
      gib|gi)   memory_b=$(( $number * 1024 * 1024 * 1024 )) ;;
      tib|ti)   memory_b=$(( $number * 1024 * 1024 * 1024 * 1024 )) ;;
      pib|pi)   memory_b=$(( $number * 1024 * 1024 * 1024 * 1024 * 1024 )) ;;
    esac
    echo "$memory_b"
  fi
}
# compute memory in different units
if [ ! -z ${VIASH_META_MEMORY+x} ]; then
  VIASH_META_MEMORY_B=`ViashMemoryAsBytes $VIASH_META_MEMORY`
  # do not define other variables if memory_b is an empty string
  if [ ! -z "$VIASH_META_MEMORY_B" ]; then
    VIASH_META_MEMORY_KB=$(( ($VIASH_META_MEMORY_B+999) / 1000 ))
    VIASH_META_MEMORY_MB=$(( ($VIASH_META_MEMORY_KB+999) / 1000 ))
    VIASH_META_MEMORY_GB=$(( ($VIASH_META_MEMORY_MB+999) / 1000 ))
    VIASH_META_MEMORY_TB=$(( ($VIASH_META_MEMORY_GB+999) / 1000 ))
    VIASH_META_MEMORY_PB=$(( ($VIASH_META_MEMORY_TB+999) / 1000 ))
    VIASH_META_MEMORY_KIB=$(( ($VIASH_META_MEMORY_B+1023) / 1024 ))
    VIASH_META_MEMORY_MIB=$(( ($VIASH_META_MEMORY_KIB+1023) / 1024 ))
    VIASH_META_MEMORY_GIB=$(( ($VIASH_META_MEMORY_MIB+1023) / 1024 ))
    VIASH_META_MEMORY_TIB=$(( ($VIASH_META_MEMORY_GIB+1023) / 1024 ))
    VIASH_META_MEMORY_PIB=$(( ($VIASH_META_MEMORY_TIB+1023) / 1024 ))
  else
    # unset memory if string is empty
    unset $VIASH_META_MEMORY_B
  fi
fi
# unset nproc if string is empty
if [ -z "$VIASH_META_CPUS" ]; then
  unset $VIASH_META_CPUS
fi


# check whether required parameters exist
if [ -z ${VIASH_PAR_RNA+x} ]; then
  ViashError '--rna' is a required argument. Use "--help" to get more information on the parameters.
  exit 1
fi
if [ -z ${VIASH_PAR_TF_ALL+x} ]; then
  ViashError '--tf_all' is a required argument. Use "--help" to get more information on the parameters.
  exit 1
fi
if [ -z ${VIASH_META_NAME+x} ]; then
  ViashError 'name' is a required argument. Use "--help" to get more information on the parameters.
  exit 1
fi
if [ -z ${VIASH_META_FUNCTIONALITY_NAME+x} ]; then
  ViashError 'functionality_name' is a required argument. Use "--help" to get more information on the parameters.
  exit 1
fi
if [ -z ${VIASH_META_RESOURCES_DIR+x} ]; then
  ViashError 'resources_dir' is a required argument. Use "--help" to get more information on the parameters.
  exit 1
fi
if [ -z ${VIASH_META_EXECUTABLE+x} ]; then
  ViashError 'executable' is a required argument. Use "--help" to get more information on the parameters.
  exit 1
fi
if [ -z ${VIASH_META_CONFIG+x} ]; then
  ViashError 'config' is a required argument. Use "--help" to get more information on the parameters.
  exit 1
fi
if [ -z ${VIASH_META_TEMP_DIR+x} ]; then
  ViashError 'temp_dir' is a required argument. Use "--help" to get more information on the parameters.
  exit 1
fi

# filling in defaults
if [ -z ${VIASH_PAR_MAX_N_LINKS+x} ]; then
  VIASH_PAR_MAX_N_LINKS="50000"
fi
if [ -z ${VIASH_PAR_NUM_WORKERS+x} ]; then
  VIASH_PAR_NUM_WORKERS="20"
fi
if [ -z ${VIASH_PAR_TEMP_DIR+x} ]; then
  VIASH_PAR_TEMP_DIR="output/temdir"
fi
if [ -z ${VIASH_PAR_LAYER+x} ]; then
  VIASH_PAR_LAYER="X_norm"
fi
if [ -z ${VIASH_PAR_SEED+x} ]; then
  VIASH_PAR_SEED="32"
fi
if [ -z ${VIASH_PAR_DATASET_ID+x} ]; then
  VIASH_PAR_DATASET_ID="op"
fi
if [ -z ${VIASH_PAR_APPLY_TF_METHODS+x} ]; then
  VIASH_PAR_APPLY_TF_METHODS="true"
fi
if [ -z ${VIASH_PAR_NORMRNA+x} ]; then
  VIASH_PAR_NORMRNA="SCT"
fi
if [ -z ${VIASH_PAR_NORMATAC+x} ]; then
  VIASH_PAR_NORMATAC="LSI"
fi
if [ -z ${VIASH_PAR_LSI_FEATURECUTOFF+x} ]; then
  VIASH_PAR_LSI_FEATURECUTOFF="q0"
fi
if [ -z ${VIASH_PAR_NDIMENSIONS_ATAC+x} ]; then
  VIASH_PAR_NDIMENSIONS_ATAC="50"
fi
if [ -z ${VIASH_PAR_INTEGRATIONMETHOD+x} ]; then
  VIASH_PAR_INTEGRATIONMETHOD="WNN"
fi
if [ -z ${VIASH_PAR_WNN_KNN+x} ]; then
  VIASH_PAR_WNN_KNN="20"
fi
if [ -z ${VIASH_PAR_MINCELLSPERCLUSTER+x} ]; then
  VIASH_PAR_MINCELLSPERCLUSTER="25"
fi
if [ -z ${VIASH_PAR_PREPROCESSING_CLUSTERINGMETHOD+x} ]; then
  VIASH_PAR_PREPROCESSING_CLUSTERINGMETHOD="1"
fi
if [ -z ${VIASH_PAR_PREPROCESSING_CLUSTERRESOLUTION+x} ]; then
  VIASH_PAR_PREPROCESSING_CLUSTERRESOLUTION="14.0"
fi
if [ -z ${VIASH_PAR_PREPROCESSING_RNA_NDIMENSIONS+x} ]; then
  VIASH_PAR_PREPROCESSING_RNA_NDIMENSIONS="50"
fi
if [ -z ${VIASH_PAR_GENOMEASSEMBLY+x} ]; then
  VIASH_PAR_GENOMEASSEMBLY="hg38"
fi
if [ -z ${VIASH_PAR_GRANIE_CORMETHOD+x} ]; then
  VIASH_PAR_GRANIE_CORMETHOD="spearman"
fi
if [ -z ${VIASH_PAR_GRANIE_INCLUDESEXCHR+x} ]; then
  VIASH_PAR_GRANIE_INCLUDESEXCHR="true"
fi
if [ -z ${VIASH_PAR_GRANIE_PROMOTERRANGE+x} ]; then
  VIASH_PAR_GRANIE_PROMOTERRANGE="250000"
fi
if [ -z ${VIASH_PAR_GRANIE_TF_PEAK_FDR_THRESHOLD+x} ]; then
  VIASH_PAR_GRANIE_TF_PEAK_FDR_THRESHOLD="0.2"
fi
if [ -z ${VIASH_PAR_GRANIE_PEAK_GENE_FDR_THRESHOLD+x} ]; then
  VIASH_PAR_GRANIE_PEAK_GENE_FDR_THRESHOLD="0.2"
fi
if [ -z ${VIASH_PAR_USEWEIGHTINGLINKS+x} ]; then
  VIASH_PAR_USEWEIGHTINGLINKS="false"
fi
if [ -z ${VIASH_PAR_FORCERERUN+x} ]; then
  VIASH_PAR_FORCERERUN="true"
fi
if [ -z ${VIASH_PAR_SUBSET+x} ]; then
  VIASH_PAR_SUBSET="false"
fi

# check whether required files exist
if [ ! -z "$VIASH_PAR_RNA" ] && [ ! -e "$VIASH_PAR_RNA" ]; then
  ViashError "Input file '$VIASH_PAR_RNA' does not exist."
  exit 1
fi
if [ ! -z "$VIASH_PAR_ATAC" ] && [ ! -e "$VIASH_PAR_ATAC" ]; then
  ViashError "Input file '$VIASH_PAR_ATAC' does not exist."
  exit 1
fi
if [ ! -z "$VIASH_PAR_TF_ALL" ] && [ ! -e "$VIASH_PAR_TF_ALL" ]; then
  ViashError "Input file '$VIASH_PAR_TF_ALL' does not exist."
  exit 1
fi

# check whether parameters values are of the right type
if [[ -n "$VIASH_PAR_MAX_N_LINKS" ]]; then
  if ! [[ "$VIASH_PAR_MAX_N_LINKS" =~ ^[-+]?[0-9]+$ ]]; then
    ViashError '--max_n_links' has to be an integer. Use "--help" to get more information on the parameters.
    exit 1
  fi
fi
if [[ -n "$VIASH_PAR_NUM_WORKERS" ]]; then
  if ! [[ "$VIASH_PAR_NUM_WORKERS" =~ ^[-+]?[0-9]+$ ]]; then
    ViashError '--num_workers' has to be an integer. Use "--help" to get more information on the parameters.
    exit 1
  fi
fi
if [[ -n "$VIASH_PAR_SEED" ]]; then
  if ! [[ "$VIASH_PAR_SEED" =~ ^[-+]?[0-9]+$ ]]; then
    ViashError '--seed' has to be an integer. Use "--help" to get more information on the parameters.
    exit 1
  fi
fi
if [[ -n "$VIASH_PAR_APPLY_TF_METHODS" ]]; then
  if ! [[ "$VIASH_PAR_APPLY_TF_METHODS" =~ ^(true|True|TRUE|false|False|FALSE|yes|Yes|YES|no|No|NO)$ ]]; then
    ViashError '--apply_tf_methods' has to be a boolean. Use "--help" to get more information on the parameters.
    exit 1
  fi
fi
if [[ -n "$VIASH_PAR_NDIMENSIONS_ATAC" ]]; then
  if ! [[ "$VIASH_PAR_NDIMENSIONS_ATAC" =~ ^[-+]?[0-9]+$ ]]; then
    ViashError '--nDimensions_ATAC' has to be an integer. Use "--help" to get more information on the parameters.
    exit 1
  fi
fi
if [[ -n "$VIASH_PAR_WNN_KNN" ]]; then
  if ! [[ "$VIASH_PAR_WNN_KNN" =~ ^[-+]?[0-9]+$ ]]; then
    ViashError '--WNN_knn' has to be an integer. Use "--help" to get more information on the parameters.
    exit 1
  fi
fi
if [[ -n "$VIASH_PAR_MINCELLSPERCLUSTER" ]]; then
  if ! [[ "$VIASH_PAR_MINCELLSPERCLUSTER" =~ ^[-+]?[0-9]+$ ]]; then
    ViashError '--minCellsPerCluster' has to be an integer. Use "--help" to get more information on the parameters.
    exit 1
  fi
fi
if [[ -n "$VIASH_PAR_PREPROCESSING_CLUSTERINGMETHOD" ]]; then
  if ! [[ "$VIASH_PAR_PREPROCESSING_CLUSTERINGMETHOD" =~ ^[-+]?[0-9]+$ ]]; then
    ViashError '--preprocessing_clusteringMethod' has to be an integer. Use "--help" to get more information on the parameters.
    exit 1
  fi
fi
if [[ -n "$VIASH_PAR_PREPROCESSING_CLUSTERRESOLUTION" ]]; then
  if ! [[ "$VIASH_PAR_PREPROCESSING_CLUSTERRESOLUTION" =~ ^[-+]?(\.[0-9]+|[0-9]+(\.[0-9]*)?)([eE][-+]?[0-9]+)?$ ]]; then
    ViashError '--preprocessing_clusterResolution' has to be a double. Use "--help" to get more information on the parameters.
    exit 1
  fi
fi
if [[ -n "$VIASH_PAR_PREPROCESSING_RNA_NDIMENSIONS" ]]; then
  if ! [[ "$VIASH_PAR_PREPROCESSING_RNA_NDIMENSIONS" =~ ^[-+]?[0-9]+$ ]]; then
    ViashError '--preprocessing_RNA_nDimensions' has to be an integer. Use "--help" to get more information on the parameters.
    exit 1
  fi
fi
if [[ -n "$VIASH_PAR_GRANIE_INCLUDESEXCHR" ]]; then
  if ! [[ "$VIASH_PAR_GRANIE_INCLUDESEXCHR" =~ ^(true|True|TRUE|false|False|FALSE|yes|Yes|YES|no|No|NO)$ ]]; then
    ViashError '--GRaNIE_includeSexChr' has to be a boolean. Use "--help" to get more information on the parameters.
    exit 1
  fi
fi
if [[ -n "$VIASH_PAR_GRANIE_PROMOTERRANGE" ]]; then
  if ! [[ "$VIASH_PAR_GRANIE_PROMOTERRANGE" =~ ^[-+]?[0-9]+$ ]]; then
    ViashError '--GRaNIE_promoterRange' has to be an integer. Use "--help" to get more information on the parameters.
    exit 1
  fi
fi
if [[ -n "$VIASH_PAR_GRANIE_TF_PEAK_FDR_THRESHOLD" ]]; then
  if ! [[ "$VIASH_PAR_GRANIE_TF_PEAK_FDR_THRESHOLD" =~ ^[-+]?(\.[0-9]+|[0-9]+(\.[0-9]*)?)([eE][-+]?[0-9]+)?$ ]]; then
    ViashError '--GRaNIE_TF_peak_fdr_threshold' has to be a double. Use "--help" to get more information on the parameters.
    exit 1
  fi
fi
if [[ -n "$VIASH_PAR_GRANIE_PEAK_GENE_FDR_THRESHOLD" ]]; then
  if ! [[ "$VIASH_PAR_GRANIE_PEAK_GENE_FDR_THRESHOLD" =~ ^[-+]?(\.[0-9]+|[0-9]+(\.[0-9]*)?)([eE][-+]?[0-9]+)?$ ]]; then
    ViashError '--GRaNIE_peak_gene_fdr_threshold' has to be a double. Use "--help" to get more information on the parameters.
    exit 1
  fi
fi
if [[ -n "$VIASH_PAR_USEWEIGHTINGLINKS" ]]; then
  if ! [[ "$VIASH_PAR_USEWEIGHTINGLINKS" =~ ^(true|True|TRUE|false|False|FALSE|yes|Yes|YES|no|No|NO)$ ]]; then
    ViashError '--useWeightingLinks' has to be a boolean. Use "--help" to get more information on the parameters.
    exit 1
  fi
fi
if [[ -n "$VIASH_PAR_FORCERERUN" ]]; then
  if ! [[ "$VIASH_PAR_FORCERERUN" =~ ^(true|True|TRUE|false|False|FALSE|yes|Yes|YES|no|No|NO)$ ]]; then
    ViashError '--forceRerun' has to be a boolean. Use "--help" to get more information on the parameters.
    exit 1
  fi
fi
if [[ -n "$VIASH_PAR_SUBSET" ]]; then
  if ! [[ "$VIASH_PAR_SUBSET" =~ ^(true|True|TRUE|false|False|FALSE|yes|Yes|YES|no|No|NO)$ ]]; then
    ViashError '--subset' has to be a boolean. Use "--help" to get more information on the parameters.
    exit 1
  fi
fi
if [[ -n "$VIASH_META_CPUS" ]]; then
  if ! [[ "$VIASH_META_CPUS" =~ ^[-+]?[0-9]+$ ]]; then
    ViashError 'cpus' has to be an integer. Use "--help" to get more information on the parameters.
    exit 1
  fi
fi
if [[ -n "$VIASH_META_MEMORY_B" ]]; then
  if ! [[ "$VIASH_META_MEMORY_B" =~ ^[-+]?[0-9]+$ ]]; then
    ViashError 'memory_b' has to be a long. Use "--help" to get more information on the parameters.
    exit 1
  fi
fi
if [[ -n "$VIASH_META_MEMORY_KB" ]]; then
  if ! [[ "$VIASH_META_MEMORY_KB" =~ ^[-+]?[0-9]+$ ]]; then
    ViashError 'memory_kb' has to be a long. Use "--help" to get more information on the parameters.
    exit 1
  fi
fi
if [[ -n "$VIASH_META_MEMORY_MB" ]]; then
  if ! [[ "$VIASH_META_MEMORY_MB" =~ ^[-+]?[0-9]+$ ]]; then
    ViashError 'memory_mb' has to be a long. Use "--help" to get more information on the parameters.
    exit 1
  fi
fi
if [[ -n "$VIASH_META_MEMORY_GB" ]]; then
  if ! [[ "$VIASH_META_MEMORY_GB" =~ ^[-+]?[0-9]+$ ]]; then
    ViashError 'memory_gb' has to be a long. Use "--help" to get more information on the parameters.
    exit 1
  fi
fi
if [[ -n "$VIASH_META_MEMORY_TB" ]]; then
  if ! [[ "$VIASH_META_MEMORY_TB" =~ ^[-+]?[0-9]+$ ]]; then
    ViashError 'memory_tb' has to be a long. Use "--help" to get more information on the parameters.
    exit 1
  fi
fi
if [[ -n "$VIASH_META_MEMORY_PB" ]]; then
  if ! [[ "$VIASH_META_MEMORY_PB" =~ ^[-+]?[0-9]+$ ]]; then
    ViashError 'memory_pb' has to be a long. Use "--help" to get more information on the parameters.
    exit 1
  fi
fi
if [[ -n "$VIASH_META_MEMORY_KIB" ]]; then
  if ! [[ "$VIASH_META_MEMORY_KIB" =~ ^[-+]?[0-9]+$ ]]; then
    ViashError 'memory_kib' has to be a long. Use "--help" to get more information on the parameters.
    exit 1
  fi
fi
if [[ -n "$VIASH_META_MEMORY_MIB" ]]; then
  if ! [[ "$VIASH_META_MEMORY_MIB" =~ ^[-+]?[0-9]+$ ]]; then
    ViashError 'memory_mib' has to be a long. Use "--help" to get more information on the parameters.
    exit 1
  fi
fi
if [[ -n "$VIASH_META_MEMORY_GIB" ]]; then
  if ! [[ "$VIASH_META_MEMORY_GIB" =~ ^[-+]?[0-9]+$ ]]; then
    ViashError 'memory_gib' has to be a long. Use "--help" to get more information on the parameters.
    exit 1
  fi
fi
if [[ -n "$VIASH_META_MEMORY_TIB" ]]; then
  if ! [[ "$VIASH_META_MEMORY_TIB" =~ ^[-+]?[0-9]+$ ]]; then
    ViashError 'memory_tib' has to be a long. Use "--help" to get more information on the parameters.
    exit 1
  fi
fi
if [[ -n "$VIASH_META_MEMORY_PIB" ]]; then
  if ! [[ "$VIASH_META_MEMORY_PIB" =~ ^[-+]?[0-9]+$ ]]; then
    ViashError 'memory_pib' has to be a long. Use "--help" to get more information on the parameters.
    exit 1
  fi
fi

# create parent directories of output files, if so desired
if [ ! -z "$VIASH_PAR_PREDICTION" ] && [ ! -d "$(dirname "$VIASH_PAR_PREDICTION")" ]; then
  mkdir -p "$(dirname "$VIASH_PAR_PREDICTION")"
fi

if  [ "$VIASH_ENGINE_ID" == "native" ]  ; then
  if [ "$VIASH_MODE" == "run" ]; then
    VIASH_CMD="bash"
  else
    ViashError "Engine '$VIASH_ENGINE_ID' does not support mode '$VIASH_MODE'."
    exit 1
  fi
fi

if [[ "$VIASH_ENGINE_TYPE" == "docker" ]]; then
  # detect volumes from file arguments
  VIASH_CHOWN_VARS=()
if [ ! -z "$VIASH_PAR_RNA" ]; then
  VIASH_DIRECTORY_MOUNTS+=( "$(ViashDockerAutodetectMountArg "$VIASH_PAR_RNA")" )
  VIASH_PAR_RNA=$(ViashDockerAutodetectMount "$VIASH_PAR_RNA")
fi
if [ ! -z "$VIASH_PAR_ATAC" ]; then
  VIASH_DIRECTORY_MOUNTS+=( "$(ViashDockerAutodetectMountArg "$VIASH_PAR_ATAC")" )
  VIASH_PAR_ATAC=$(ViashDockerAutodetectMount "$VIASH_PAR_ATAC")
fi
if [ ! -z "$VIASH_PAR_PREDICTION" ]; then
  VIASH_DIRECTORY_MOUNTS+=( "$(ViashDockerAutodetectMountArg "$VIASH_PAR_PREDICTION")" )
  VIASH_PAR_PREDICTION=$(ViashDockerAutodetectMount "$VIASH_PAR_PREDICTION")
  VIASH_CHOWN_VARS+=( "$VIASH_PAR_PREDICTION" )
fi
if [ ! -z "$VIASH_PAR_TF_ALL" ]; then
  VIASH_DIRECTORY_MOUNTS+=( "$(ViashDockerAutodetectMountArg "$VIASH_PAR_TF_ALL")" )
  VIASH_PAR_TF_ALL=$(ViashDockerAutodetectMount "$VIASH_PAR_TF_ALL")
fi
if [ ! -z "$VIASH_META_RESOURCES_DIR" ]; then
  VIASH_DIRECTORY_MOUNTS+=( "$(ViashDockerAutodetectMountArg "$VIASH_META_RESOURCES_DIR")" )
  VIASH_META_RESOURCES_DIR=$(ViashDockerAutodetectMount "$VIASH_META_RESOURCES_DIR")
fi
if [ ! -z "$VIASH_META_EXECUTABLE" ]; then
  VIASH_DIRECTORY_MOUNTS+=( "$(ViashDockerAutodetectMountArg "$VIASH_META_EXECUTABLE")" )
  VIASH_META_EXECUTABLE=$(ViashDockerAutodetectMount "$VIASH_META_EXECUTABLE")
fi
if [ ! -z "$VIASH_META_CONFIG" ]; then
  VIASH_DIRECTORY_MOUNTS+=( "$(ViashDockerAutodetectMountArg "$VIASH_META_CONFIG")" )
  VIASH_META_CONFIG=$(ViashDockerAutodetectMount "$VIASH_META_CONFIG")
fi
if [ ! -z "$VIASH_META_TEMP_DIR" ]; then
  VIASH_DIRECTORY_MOUNTS+=( "$(ViashDockerAutodetectMountArg "$VIASH_META_TEMP_DIR")" )
  VIASH_META_TEMP_DIR=$(ViashDockerAutodetectMount "$VIASH_META_TEMP_DIR")
fi
  
  # get unique mounts
  VIASH_UNIQUE_MOUNTS=($(for val in "${VIASH_DIRECTORY_MOUNTS[@]}"; do echo "$val"; done | sort -u))
fi

if [[ "$VIASH_ENGINE_TYPE" == "docker" ]]; then
  # change file ownership
  function ViashPerformChown {
    if (( ${#VIASH_CHOWN_VARS[@]} )); then
      set +e
      VIASH_CMD="docker run --entrypoint=bash --rm ${VIASH_UNIQUE_MOUNTS[@]} $VIASH_DOCKER_IMAGE_ID -c 'chown $(id -u):$(id -g) --silent --recursive ${VIASH_CHOWN_VARS[@]}'"
      ViashDebug "+ $VIASH_CMD"
      eval $VIASH_CMD
      set -e
    fi
  }
  trap ViashPerformChown EXIT
fi

if [[ "$VIASH_ENGINE_TYPE" == "docker" ]]; then
  # helper function for filling in extra docker args
  if [ ! -z "$VIASH_META_MEMORY_B" ]; then
    VIASH_DOCKER_RUN_ARGS+=("--memory=${VIASH_META_MEMORY_B}")
  fi
  if [ ! -z "$VIASH_META_CPUS" ]; then
    VIASH_DOCKER_RUN_ARGS+=("--cpus=${VIASH_META_CPUS}")
  fi
fi

if [[ "$VIASH_ENGINE_TYPE" == "docker" ]]; then
  VIASH_CMD="docker run --entrypoint=bash ${VIASH_DOCKER_RUN_ARGS[@]} ${VIASH_UNIQUE_MOUNTS[@]} $VIASH_DOCKER_IMAGE_ID"
fi


# set dependency paths


ViashDebug "Running command: $(echo $VIASH_CMD)"
cat << VIASHEOF | eval $VIASH_CMD
set -e
tempscript=\$(mktemp "$VIASH_META_TEMP_DIR/viash-run-granie-XXXXXX").R
function clean_up {
  rm "\$tempscript"
}
function interrupt {
  echo -e "\nCTRL-C Pressed..."
  exit 1
}
trap clean_up EXIT
trap interrupt INT SIGINT
cat > "\$tempscript" << 'VIASHMAIN'
set.seed(42)
suppressPackageStartupMessages(library(Seurat))
suppressPackageStartupMessages(library(Signac))
suppressPackageStartupMessages(library(Matrix))
library(GRaNIEverse)
library(GRaNIE)
suppressPackageStartupMessages(library(qs))
suppressPackageStartupMessages(library(BSgenome.Hsapiens.UCSC.hg38))
suppressPackageStartupMessages(library(EnsDb.Hsapiens.v86))
suppressPackageStartupMessages(library(EnsDb.Mmusculus.v79))
suppressPackageStartupMessages(library(BSgenome.Mmusculus.UCSC.mm39))
suppressPackageStartupMessages(library(dplyr))
suppressPackageStartupMessages(library(SummarizedExperiment))

# library(zellkonverter)


suppressPackageStartupMessages(library(reticulate))
reticulate::install_miniconda()
py_install("anndata")
# install.packages("anndata")
# anndata::install_anndata()
suppressPackageStartupMessages(library(anndata))
# py_install("anndata")
# anndata <- import("anndata")


## VIASH START
# The following code has been auto-generated by Viash.
# treat warnings as errors
.viash_orig_warn <- options(warn = 2)

par <- list(
  "rna" = $( if [ ! -z ${VIASH_PAR_RNA+x} ]; then echo -n "'"; echo -n "$VIASH_PAR_RNA" | sed "s#['\\]#\\\\&#g"; echo "'"; else echo NULL; fi ),
  "atac" = $( if [ ! -z ${VIASH_PAR_ATAC+x} ]; then echo -n "'"; echo -n "$VIASH_PAR_ATAC" | sed "s#['\\]#\\\\&#g"; echo "'"; else echo NULL; fi ),
  "prediction" = $( if [ ! -z ${VIASH_PAR_PREDICTION+x} ]; then echo -n "'"; echo -n "$VIASH_PAR_PREDICTION" | sed "s#['\\]#\\\\&#g"; echo "'"; else echo NULL; fi ),
  "tf_all" = $( if [ ! -z ${VIASH_PAR_TF_ALL+x} ]; then echo -n "'"; echo -n "$VIASH_PAR_TF_ALL" | sed "s#['\\]#\\\\&#g"; echo "'"; else echo NULL; fi ),
  "max_n_links" = $( if [ ! -z ${VIASH_PAR_MAX_N_LINKS+x} ]; then echo -n "as.integer('"; echo -n "$VIASH_PAR_MAX_N_LINKS" | sed "s#['\\]#\\\\&#g"; echo "')"; else echo NULL; fi ),
  "num_workers" = $( if [ ! -z ${VIASH_PAR_NUM_WORKERS+x} ]; then echo -n "as.integer('"; echo -n "$VIASH_PAR_NUM_WORKERS" | sed "s#['\\]#\\\\&#g"; echo "')"; else echo NULL; fi ),
  "temp_dir" = $( if [ ! -z ${VIASH_PAR_TEMP_DIR+x} ]; then echo -n "'"; echo -n "$VIASH_PAR_TEMP_DIR" | sed "s#['\\]#\\\\&#g"; echo "'"; else echo NULL; fi ),
  "layer" = $( if [ ! -z ${VIASH_PAR_LAYER+x} ]; then echo -n "'"; echo -n "$VIASH_PAR_LAYER" | sed "s#['\\]#\\\\&#g"; echo "'"; else echo NULL; fi ),
  "seed" = $( if [ ! -z ${VIASH_PAR_SEED+x} ]; then echo -n "as.integer('"; echo -n "$VIASH_PAR_SEED" | sed "s#['\\]#\\\\&#g"; echo "')"; else echo NULL; fi ),
  "dataset_id" = $( if [ ! -z ${VIASH_PAR_DATASET_ID+x} ]; then echo -n "'"; echo -n "$VIASH_PAR_DATASET_ID" | sed "s#['\\]#\\\\&#g"; echo "'"; else echo NULL; fi ),
  "apply_tf_methods" = $( if [ ! -z ${VIASH_PAR_APPLY_TF_METHODS+x} ]; then echo -n "as.logical(toupper('"; echo -n "$VIASH_PAR_APPLY_TF_METHODS" | sed "s#['\\]#\\\\&#g"; echo "'))"; else echo NULL; fi ),
  "normRNA" = $( if [ ! -z ${VIASH_PAR_NORMRNA+x} ]; then echo -n "'"; echo -n "$VIASH_PAR_NORMRNA" | sed "s#['\\]#\\\\&#g"; echo "'"; else echo NULL; fi ),
  "normATAC" = $( if [ ! -z ${VIASH_PAR_NORMATAC+x} ]; then echo -n "'"; echo -n "$VIASH_PAR_NORMATAC" | sed "s#['\\]#\\\\&#g"; echo "'"; else echo NULL; fi ),
  "LSI_featureCutoff" = $( if [ ! -z ${VIASH_PAR_LSI_FEATURECUTOFF+x} ]; then echo -n "'"; echo -n "$VIASH_PAR_LSI_FEATURECUTOFF" | sed "s#['\\]#\\\\&#g"; echo "'"; else echo NULL; fi ),
  "nDimensions_ATAC" = $( if [ ! -z ${VIASH_PAR_NDIMENSIONS_ATAC+x} ]; then echo -n "as.integer('"; echo -n "$VIASH_PAR_NDIMENSIONS_ATAC" | sed "s#['\\]#\\\\&#g"; echo "')"; else echo NULL; fi ),
  "integrationMethod" = $( if [ ! -z ${VIASH_PAR_INTEGRATIONMETHOD+x} ]; then echo -n "'"; echo -n "$VIASH_PAR_INTEGRATIONMETHOD" | sed "s#['\\]#\\\\&#g"; echo "'"; else echo NULL; fi ),
  "WNN_knn" = $( if [ ! -z ${VIASH_PAR_WNN_KNN+x} ]; then echo -n "as.integer('"; echo -n "$VIASH_PAR_WNN_KNN" | sed "s#['\\]#\\\\&#g"; echo "')"; else echo NULL; fi ),
  "minCellsPerCluster" = $( if [ ! -z ${VIASH_PAR_MINCELLSPERCLUSTER+x} ]; then echo -n "as.integer('"; echo -n "$VIASH_PAR_MINCELLSPERCLUSTER" | sed "s#['\\]#\\\\&#g"; echo "')"; else echo NULL; fi ),
  "preprocessing_clusteringMethod" = $( if [ ! -z ${VIASH_PAR_PREPROCESSING_CLUSTERINGMETHOD+x} ]; then echo -n "as.integer('"; echo -n "$VIASH_PAR_PREPROCESSING_CLUSTERINGMETHOD" | sed "s#['\\]#\\\\&#g"; echo "')"; else echo NULL; fi ),
  "preprocessing_clusterResolution" = $( if [ ! -z ${VIASH_PAR_PREPROCESSING_CLUSTERRESOLUTION+x} ]; then echo -n "as.numeric('"; echo -n "$VIASH_PAR_PREPROCESSING_CLUSTERRESOLUTION" | sed "s#['\\]#\\\\&#g"; echo "')"; else echo NULL; fi ),
  "preprocessing_RNA_nDimensions" = $( if [ ! -z ${VIASH_PAR_PREPROCESSING_RNA_NDIMENSIONS+x} ]; then echo -n "as.integer('"; echo -n "$VIASH_PAR_PREPROCESSING_RNA_NDIMENSIONS" | sed "s#['\\]#\\\\&#g"; echo "')"; else echo NULL; fi ),
  "genomeAssembly" = $( if [ ! -z ${VIASH_PAR_GENOMEASSEMBLY+x} ]; then echo -n "'"; echo -n "$VIASH_PAR_GENOMEASSEMBLY" | sed "s#['\\]#\\\\&#g"; echo "'"; else echo NULL; fi ),
  "GRaNIE_corMethod" = $( if [ ! -z ${VIASH_PAR_GRANIE_CORMETHOD+x} ]; then echo -n "'"; echo -n "$VIASH_PAR_GRANIE_CORMETHOD" | sed "s#['\\]#\\\\&#g"; echo "'"; else echo NULL; fi ),
  "GRaNIE_includeSexChr" = $( if [ ! -z ${VIASH_PAR_GRANIE_INCLUDESEXCHR+x} ]; then echo -n "as.logical(toupper('"; echo -n "$VIASH_PAR_GRANIE_INCLUDESEXCHR" | sed "s#['\\]#\\\\&#g"; echo "'))"; else echo NULL; fi ),
  "GRaNIE_promoterRange" = $( if [ ! -z ${VIASH_PAR_GRANIE_PROMOTERRANGE+x} ]; then echo -n "as.integer('"; echo -n "$VIASH_PAR_GRANIE_PROMOTERRANGE" | sed "s#['\\]#\\\\&#g"; echo "')"; else echo NULL; fi ),
  "GRaNIE_TF_peak_fdr_threshold" = $( if [ ! -z ${VIASH_PAR_GRANIE_TF_PEAK_FDR_THRESHOLD+x} ]; then echo -n "as.numeric('"; echo -n "$VIASH_PAR_GRANIE_TF_PEAK_FDR_THRESHOLD" | sed "s#['\\]#\\\\&#g"; echo "')"; else echo NULL; fi ),
  "GRaNIE_peak_gene_fdr_threshold" = $( if [ ! -z ${VIASH_PAR_GRANIE_PEAK_GENE_FDR_THRESHOLD+x} ]; then echo -n "as.numeric('"; echo -n "$VIASH_PAR_GRANIE_PEAK_GENE_FDR_THRESHOLD" | sed "s#['\\]#\\\\&#g"; echo "')"; else echo NULL; fi ),
  "useWeightingLinks" = $( if [ ! -z ${VIASH_PAR_USEWEIGHTINGLINKS+x} ]; then echo -n "as.logical(toupper('"; echo -n "$VIASH_PAR_USEWEIGHTINGLINKS" | sed "s#['\\]#\\\\&#g"; echo "'))"; else echo NULL; fi ),
  "forceRerun" = $( if [ ! -z ${VIASH_PAR_FORCERERUN+x} ]; then echo -n "as.logical(toupper('"; echo -n "$VIASH_PAR_FORCERERUN" | sed "s#['\\]#\\\\&#g"; echo "'))"; else echo NULL; fi ),
  "subset" = $( if [ ! -z ${VIASH_PAR_SUBSET+x} ]; then echo -n "as.logical(toupper('"; echo -n "$VIASH_PAR_SUBSET" | sed "s#['\\]#\\\\&#g"; echo "'))"; else echo NULL; fi )
)
meta <- list(
  "name" = $( if [ ! -z ${VIASH_META_NAME+x} ]; then echo -n "'"; echo -n "$VIASH_META_NAME" | sed "s#['\\]#\\\\&#g"; echo "'"; else echo NULL; fi ),
  "functionality_name" = $( if [ ! -z ${VIASH_META_FUNCTIONALITY_NAME+x} ]; then echo -n "'"; echo -n "$VIASH_META_FUNCTIONALITY_NAME" | sed "s#['\\]#\\\\&#g"; echo "'"; else echo NULL; fi ),
  "resources_dir" = $( if [ ! -z ${VIASH_META_RESOURCES_DIR+x} ]; then echo -n "'"; echo -n "$VIASH_META_RESOURCES_DIR" | sed "s#['\\]#\\\\&#g"; echo "'"; else echo NULL; fi ),
  "executable" = $( if [ ! -z ${VIASH_META_EXECUTABLE+x} ]; then echo -n "'"; echo -n "$VIASH_META_EXECUTABLE" | sed "s#['\\]#\\\\&#g"; echo "'"; else echo NULL; fi ),
  "config" = $( if [ ! -z ${VIASH_META_CONFIG+x} ]; then echo -n "'"; echo -n "$VIASH_META_CONFIG" | sed "s#['\\]#\\\\&#g"; echo "'"; else echo NULL; fi ),
  "temp_dir" = $( if [ ! -z ${VIASH_META_TEMP_DIR+x} ]; then echo -n "'"; echo -n "$VIASH_META_TEMP_DIR" | sed "s#['\\]#\\\\&#g"; echo "'"; else echo NULL; fi ),
  "cpus" = $( if [ ! -z ${VIASH_META_CPUS+x} ]; then echo -n "as.integer('"; echo -n "$VIASH_META_CPUS" | sed "s#['\\]#\\\\&#g"; echo "')"; else echo NULL; fi ),
  "memory_b" = $( if [ ! -z ${VIASH_META_MEMORY_B+x} ]; then echo -n "bit64::as.integer64('"; echo -n "$VIASH_META_MEMORY_B" | sed "s#['\\]#\\\\&#g"; echo "')"; else echo NULL; fi ),
  "memory_kb" = $( if [ ! -z ${VIASH_META_MEMORY_KB+x} ]; then echo -n "bit64::as.integer64('"; echo -n "$VIASH_META_MEMORY_KB" | sed "s#['\\]#\\\\&#g"; echo "')"; else echo NULL; fi ),
  "memory_mb" = $( if [ ! -z ${VIASH_META_MEMORY_MB+x} ]; then echo -n "bit64::as.integer64('"; echo -n "$VIASH_META_MEMORY_MB" | sed "s#['\\]#\\\\&#g"; echo "')"; else echo NULL; fi ),
  "memory_gb" = $( if [ ! -z ${VIASH_META_MEMORY_GB+x} ]; then echo -n "bit64::as.integer64('"; echo -n "$VIASH_META_MEMORY_GB" | sed "s#['\\]#\\\\&#g"; echo "')"; else echo NULL; fi ),
  "memory_tb" = $( if [ ! -z ${VIASH_META_MEMORY_TB+x} ]; then echo -n "bit64::as.integer64('"; echo -n "$VIASH_META_MEMORY_TB" | sed "s#['\\]#\\\\&#g"; echo "')"; else echo NULL; fi ),
  "memory_pb" = $( if [ ! -z ${VIASH_META_MEMORY_PB+x} ]; then echo -n "bit64::as.integer64('"; echo -n "$VIASH_META_MEMORY_PB" | sed "s#['\\]#\\\\&#g"; echo "')"; else echo NULL; fi ),
  "memory_kib" = $( if [ ! -z ${VIASH_META_MEMORY_KIB+x} ]; then echo -n "bit64::as.integer64('"; echo -n "$VIASH_META_MEMORY_KIB" | sed "s#['\\]#\\\\&#g"; echo "')"; else echo NULL; fi ),
  "memory_mib" = $( if [ ! -z ${VIASH_META_MEMORY_MIB+x} ]; then echo -n "bit64::as.integer64('"; echo -n "$VIASH_META_MEMORY_MIB" | sed "s#['\\]#\\\\&#g"; echo "')"; else echo NULL; fi ),
  "memory_gib" = $( if [ ! -z ${VIASH_META_MEMORY_GIB+x} ]; then echo -n "bit64::as.integer64('"; echo -n "$VIASH_META_MEMORY_GIB" | sed "s#['\\]#\\\\&#g"; echo "')"; else echo NULL; fi ),
  "memory_tib" = $( if [ ! -z ${VIASH_META_MEMORY_TIB+x} ]; then echo -n "bit64::as.integer64('"; echo -n "$VIASH_META_MEMORY_TIB" | sed "s#['\\]#\\\\&#g"; echo "')"; else echo NULL; fi ),
  "memory_pib" = $( if [ ! -z ${VIASH_META_MEMORY_PIB+x} ]; then echo -n "bit64::as.integer64('"; echo -n "$VIASH_META_MEMORY_PIB" | sed "s#['\\]#\\\\&#g"; echo "')"; else echo NULL; fi )
)
dep <- list(
  
)


# restore original warn setting
options(.viash_orig_warn)
rm(.viash_orig_warn)

## VIASH END


cat("Content of par list:")
str(par)

#### STANDARD ASSIGNMENTS ###
file_seurat = "seurat_granie.qs"


if (!dir.exists(par\$temp_dir)) {
  dir.create(par\$temp_dir, recursive = TRUE)
}


#########################
# Downloading resources #
#########################
file_hocomoco_v12 = "https://s3.embl.de/zaugg-web/GRaNIE/TFBS/hg38/PWMScan_HOCOMOCOv12_H12INVIVO.tar.gz"
destfile <- paste0(par\$temp_dir, "/PWMScan_HOCOMOCOv12_H12INVIVO.tar.gz")
if (!file.exists(destfile)) {
  options(timeout = 1200)
  download.file(file_hocomoco_v12, destfile)
}
# Define the directory to extract the files to
exdir <- paste0(par\$temp_dir, "/PWMScan_HOCOMOCOv12_H12INVIVO") 
GRaNIE_TFBSFolder = paste0(exdir, "/H12INVIVO")
if (!file.exists(GRaNIE_TFBSFolder)) {
  untar(destfile, exdir = exdir)
}

if (par\$genomeAssembly == "hg38"){
  file_RNA_URL = "https://s3.embl.de/zaugg-web/GRaNIEverse/features_RNA_hg38.tsv.gz"

} else if (par\$genomeAssembly == "mm10") {
  file_RNA_URL = "https://s3.embl.de/zaugg-web/GRaNIEverse/features_RNA_mm10.tsv.gz"
}

file_RNA <- paste0(par\$temp_dir, "/features_RNA_", par\$genomeAssembly, ".tsv.gz")
if (!file.exists(file_RNA)) {
  options(timeout = 1200)
  download.file(file_RNA_URL, file_RNA)
}

print('Donwnloading resources finished')

###################
# Preprocess data #
###################

if (par\$forceRerun | !file.exists(file_seurat)) {
 # read rna 
  adata <- anndata::read_h5ad(par\$rna)
  dataset_id = adata\$dataset_id

  rna <- t(adata\$X)  # Transpose to match R's column-major order
  rna <- Matrix(rna)
  rownames(rna) <- adata\$var_names
  colnames(rna) <- adata\$obs_names

 seurat_object <- CreateSeuratObject(count = rna, project = "PBMC", min.cells = 1, min.features = 1, assay = "RNA")
 
 print('Seurat object created for rna')
 # RangedSummarizedExperiment for atac
  adata <- anndata::read_h5ad(par\$atac)
  counts <- t(adata\$X)  # Transpose to match R's column-major order
  rownames(counts) <- rownames(adata\$var)
  colnames(counts) <- rownames(adata\$obs)
  colData <- as.data.frame(adata\$obs)
  atac <- SummarizedExperiment(
    assays = list(counts = Matrix(counts)),
    colData = colData,
    # rowData = rowData
    rowRanges = GRanges(adata\$var\$seqname,
    IRanges(adata\$var\$ranges))
  )

rownames(atac) <- paste(as.character(seqnames(atac)), as.character(ranges(atac)), sep=':')
print('Seurat object created for atac')
 
 # Extract counts and metadata from the RangedSummarizedExperiment
  atac_counts <- assays(atac)\$counts
  
  rownames(atac_counts) =  paste0(seqnames(rowRanges(atac)) %>% as.character(), ":", start(rowRanges(atac)), "-", end(rowRanges(atac)))
  
  # Create a ChromatinAssay
  chrom_assay <- CreateChromatinAssay(
   counts = atac_counts,
   sep = c(":", "-"),
   genome = 'hg38',
   fragments = NULL,
   min.cells = 1,
   min.features = 1,
   colData = DataFrame(colData(atac))
  )
  print('ChromatinAssay created')
  
  annotations <- GetGRangesFromEnsDb(ensdb = EnsDb.Hsapiens.v86)
    
  print('Annotations created')
  
  seqlevelsStyle(annotations) <- "UCSC"
  genome(annotations) <- par\$genomeAssembly
  Annotation(chrom_assay) <- annotations
 
  # Unify cells
  # Identify the common cells between the RNA and ATAC assays
  common_cells <- intersect(colnames(seurat_object[["RNA"]]), colnames(chrom_assay))
  
  # Subset the Seurat object to include only the common cells
  chrom_assay <- subset(chrom_assay, cells = common_cells)

  seurat_object[["peaks"]] = chrom_assay
    
  qs::qsave(seurat_object, paste0(par\$temp_dir, "seurat_granie.qs" ) )
    
} else {

  seurat_object = qs::qread(file_seurat)
  
}

output_seuratProcessed = paste0(par\$temp_dir, "/seuratObject.qs")

print('Preprocessing finished')
###################
# Preprocess data #
###################

# Take output from preprocessing steps
GRaNIE_file_peaks = paste0(par\$temp_dir, "/atac.pseudobulkFromClusters_res", par\$preprocessing_clusterResolution, "_mean.tsv.gz")
GRaNIE_file_rna = paste0(par\$temp_dir, "/rna.pseudobulkFromClusters_res", par\$preprocessing_clusterResolution, "_mean.tsv.gz")
GRaNIE_file_metadata = paste0(par\$temp_dir, "/metadata_res", par\$preprocessing_clusterResolution, "_mean.tsv.gz")

if (file.exists(GRaNIE_file_peaks) & file.exists(GRaNIE_file_metadata) & file.exists(GRaNIE_file_rna) & !par\$forceRerun) {
  
  cat("Preprocessing skipped because all files already exist anf forceRerun = FALSE.")
  
} else {
  seurat_object = prepareSeuratData_GRaNIE(seurat_object, 
                                           outputDir = par\$temp_dir,
                                           saveSeuratObject = TRUE,
                                           genome = par\$genomeAssembly,
                                           assayName_RNA = "RNA", normRNA = "SCT", nDimensions_RNA = par\$preprocessing_RNA_nDimensions, recalculateVariableFeatures = NULL,
                                           assayName_ATAC_raw = "peaks", 
                                           normATAC = "LSI", LSI_featureCutoff = "q0", nDimensions_ATAC = 50, dimensionsToIgnore_LSI_ATAC = 1,
                                           integrationMethod = "WNN", WNN_knn = 20,
                                           pseudobulk_source = "cluster",
                                           countAggregation = "mean",
                                           clusteringAlgorithm = par\$preprocessing_clusteringMethod, 
                                           clusterResolutions = par\$preprocessing_clusterResolution,
                                           minCellsPerCluster = 25,
                                           forceRerun = FALSE
      )
  
}



##############
# Run GRaNIE #
##############

GRN = runGRaNIE(
  dir_output = par\$temp_dir,
  datasetName = "undescribed",
  GRaNIE_file_peaks,
  GRaNIE_file_rna,
  GRaNIE_file_metadata,
  TFBS_source = "custom",
  TFBS_folder = GRaNIE_TFBSFolder,
  genomeAssembly = par\$genomeAssembly,
  normalization_peaks = "none",
  idColumn_peaks = "peakID",
  normalization_rna = "none",
  idColumn_RNA = "ENSEMBL",
  includeSexChr = par\$GRaNIE_includeSexChr,
  minCV = 0,
  minNormalizedMean_peaks = NULL,
  minNormalizedMean_RNA = NULL,
  minSizePeaks = 5,
  corMethod = par\$GRaNIE_corMethod,
  promoterRange = par\$GRaNIE_promoterRange,
  useGCCorrection = FALSE,
  TF_peak.fdr.threshold = par\$GRaNIE_TF_peak_fdr_threshold,
  peak_gene.fdr.threshold = par\$GRaNIE_peak_gene_fdr_threshold,
  runTFClassification = FALSE,
  runNetworkAnalyses = FALSE,
  nCores = par\$num_workers,
  forceRerun = TRUE
)

# Post-process GRN
connections.df = getGRNConnections(GRN, 
                                   include_TF_gene_correlations = TRUE, 
                                   include_peakMetadata = TRUE, 
                                   include_TFMetadata = TRUE, 
                                   include_geneMetadata = TRUE)

final.df = connections.df %>%
  dplyr::select(TF.name, gene.name, TF_gene.r) %>%
  dplyr::rename(source = TF.name, target = gene.name)

if (par\$useWeightingLinks) {
  final.df = dplyr::mutate(final.df, weight = abs(.data\$TF_gene.r))
} else {
  final.df = dplyr::mutate(final.df, weight = 1)
}

net = final.df %>%
  dplyr::select(source, target, weight) 


cat("Output GRN\\n")
print(head(net))
net\$weight <- as.character(net\$weight)
if (!is.data.frame(net)) {
    stop("Error: 'net' is not a dataframe")
}


output <- AnnData(
  X = matrix(nrow = 0, ncol = 0),
  uns = list(
    method_id = "ppcor",
    dataset_id = dataset_id,
    prediction = net[, c("source", "target", "weight")]
  )
)

print(output)
# output\$write(par\$prediction)
print(par\$prediction)
output\$write_h5ad(par\$prediction, compression = "gzip")
VIASHMAIN
Rscript "\$tempscript" &
wait "\$!"

VIASHEOF


if [[ "$VIASH_ENGINE_TYPE" == "docker" ]]; then
  # strip viash automount from file paths
  
  if [ ! -z "$VIASH_PAR_RNA" ]; then
    VIASH_PAR_RNA=$(ViashDockerStripAutomount "$VIASH_PAR_RNA")
  fi
  if [ ! -z "$VIASH_PAR_ATAC" ]; then
    VIASH_PAR_ATAC=$(ViashDockerStripAutomount "$VIASH_PAR_ATAC")
  fi
  if [ ! -z "$VIASH_PAR_PREDICTION" ]; then
    VIASH_PAR_PREDICTION=$(ViashDockerStripAutomount "$VIASH_PAR_PREDICTION")
  fi
  if [ ! -z "$VIASH_PAR_TF_ALL" ]; then
    VIASH_PAR_TF_ALL=$(ViashDockerStripAutomount "$VIASH_PAR_TF_ALL")
  fi
  if [ ! -z "$VIASH_META_RESOURCES_DIR" ]; then
    VIASH_META_RESOURCES_DIR=$(ViashDockerStripAutomount "$VIASH_META_RESOURCES_DIR")
  fi
  if [ ! -z "$VIASH_META_EXECUTABLE" ]; then
    VIASH_META_EXECUTABLE=$(ViashDockerStripAutomount "$VIASH_META_EXECUTABLE")
  fi
  if [ ! -z "$VIASH_META_CONFIG" ]; then
    VIASH_META_CONFIG=$(ViashDockerStripAutomount "$VIASH_META_CONFIG")
  fi
  if [ ! -z "$VIASH_META_TEMP_DIR" ]; then
    VIASH_META_TEMP_DIR=$(ViashDockerStripAutomount "$VIASH_META_TEMP_DIR")
  fi
fi


# check whether required files exist
if [ ! -z "$VIASH_PAR_PREDICTION" ] && [ ! -e "$VIASH_PAR_PREDICTION" ]; then
  ViashError "Output file '$VIASH_PAR_PREDICTION' does not exist."
  exit 1
fi


exit 0
