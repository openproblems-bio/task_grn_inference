#!/usr/bin/env bash

# run_grn_evaluation build_main
# 
# This wrapper script is auto-generated by viash 0.9.4 and is thus a derivative
# work thereof. This software comes with ABSOLUTELY NO WARRANTY from Data
# Intuitive.
# 
# The component may contain files which fall under a different license. The
# authors of this component should specify the license in the header of such
# files, or include a separate license file detailing the licenses of all included
# files.

set -e

if [ -z "$VIASH_TEMP" ]; then
  VIASH_TEMP=${VIASH_TEMP:-$VIASH_TMPDIR}
  VIASH_TEMP=${VIASH_TEMP:-$VIASH_TEMPDIR}
  VIASH_TEMP=${VIASH_TEMP:-$VIASH_TMP}
  VIASH_TEMP=${VIASH_TEMP:-$TMPDIR}
  VIASH_TEMP=${VIASH_TEMP:-$TMP}
  VIASH_TEMP=${VIASH_TEMP:-$TEMPDIR}
  VIASH_TEMP=${VIASH_TEMP:-$TEMP}
  VIASH_TEMP=${VIASH_TEMP:-/tmp}
fi

# define helper functions
# ViashQuote: put quotes around non flag values
# $1     : unquoted string
# return : possibly quoted string
# examples:
#   ViashQuote --foo      # returns --foo
#   ViashQuote bar        # returns 'bar'
#   Viashquote --foo=bar  # returns --foo='bar'
function ViashQuote {
  if [[ "$1" =~ ^-+[a-zA-Z0-9_\-]+=.+$ ]]; then
    echo "$1" | sed "s#=\(.*\)#='\1'#"
  elif [[ "$1" =~ ^-+[a-zA-Z0-9_\-]+$ ]]; then
    echo "$1"
  else
    echo "'$1'"
  fi
}
# ViashRemoveFlags: Remove leading flag
# $1     : string with a possible leading flag
# return : string without possible leading flag
# examples:
#   ViashRemoveFlags --foo=bar  # returns bar
function ViashRemoveFlags {
  echo "$1" | sed 's/^--*[a-zA-Z0-9_\-]*=//'
}
# ViashSourceDir: return the path of a bash file, following symlinks
# usage   : ViashSourceDir ${BASH_SOURCE[0]}
# $1      : Should always be set to ${BASH_SOURCE[0]}
# returns : The absolute path of the bash file
function ViashSourceDir {
  local source="$1"
  while [ -h "$source" ]; do
    local dir="$( cd -P "$( dirname "$source" )" >/dev/null 2>&1 && pwd )"
    source="$(readlink "$source")"
    [[ $source != /* ]] && source="$dir/$source"
  done
  cd -P "$( dirname "$source" )" >/dev/null 2>&1 && pwd
}
# ViashFindTargetDir: return the path of the '.build.yaml' file, following symlinks
# usage   : ViashFindTargetDir 'ScriptPath'
# $1      : The location from where to start the upward search
# returns : The absolute path of the '.build.yaml' file
function ViashFindTargetDir {
  local source="$1"
  while [[ "$source" != "" && ! -e "$source/.build.yaml" ]]; do
    source=${source%/*}
  done
  echo $source
}
# see https://en.wikipedia.org/wiki/Syslog#Severity_level
VIASH_LOGCODE_EMERGENCY=0
VIASH_LOGCODE_ALERT=1
VIASH_LOGCODE_CRITICAL=2
VIASH_LOGCODE_ERROR=3
VIASH_LOGCODE_WARNING=4
VIASH_LOGCODE_NOTICE=5
VIASH_LOGCODE_INFO=6
VIASH_LOGCODE_DEBUG=7
VIASH_VERBOSITY=$VIASH_LOGCODE_NOTICE

# ViashLog: Log events depending on the verbosity level
# usage: ViashLog 1 alert Oh no something went wrong!
# $1: required verbosity level
# $2: display tag
# $3+: messages to display
# stdout: Your input, prepended by '[$2] '.
function ViashLog {
  local required_level="$1"
  local display_tag="$2"
  shift 2
  if [ $VIASH_VERBOSITY -ge $required_level ]; then
    >&2 echo "[$display_tag]" "$@"
  fi
}

# ViashEmergency: log events when the system is unstable
# usage: ViashEmergency Oh no something went wrong.
# stdout: Your input, prepended by '[emergency] '.
function ViashEmergency {
  ViashLog $VIASH_LOGCODE_EMERGENCY emergency "$@"
}

# ViashAlert: log events when actions must be taken immediately (e.g. corrupted system database)
# usage: ViashAlert Oh no something went wrong.
# stdout: Your input, prepended by '[alert] '.
function ViashAlert {
  ViashLog $VIASH_LOGCODE_ALERT alert "$@"
}

# ViashCritical: log events when a critical condition occurs
# usage: ViashCritical Oh no something went wrong.
# stdout: Your input, prepended by '[critical] '.
function ViashCritical {
  ViashLog $VIASH_LOGCODE_CRITICAL critical "$@"
}

# ViashError: log events when an error condition occurs
# usage: ViashError Oh no something went wrong.
# stdout: Your input, prepended by '[error] '.
function ViashError {
  ViashLog $VIASH_LOGCODE_ERROR error "$@"
}

# ViashWarning: log potentially abnormal events
# usage: ViashWarning Something may have gone wrong.
# stdout: Your input, prepended by '[warning] '.
function ViashWarning {
  ViashLog $VIASH_LOGCODE_WARNING warning "$@"
}

# ViashNotice: log significant but normal events
# usage: ViashNotice This just happened.
# stdout: Your input, prepended by '[notice] '.
function ViashNotice {
  ViashLog $VIASH_LOGCODE_NOTICE notice "$@"
}

# ViashInfo: log normal events
# usage: ViashInfo This just happened.
# stdout: Your input, prepended by '[info] '.
function ViashInfo {
  ViashLog $VIASH_LOGCODE_INFO info "$@"
}

# ViashDebug: log all events, for debugging purposes
# usage: ViashDebug This just happened.
# stdout: Your input, prepended by '[debug] '.
function ViashDebug {
  ViashLog $VIASH_LOGCODE_DEBUG debug "$@"
}

# find source folder of this component
VIASH_META_RESOURCES_DIR=`ViashSourceDir ${BASH_SOURCE[0]}`

# find the root of the built components & dependencies
VIASH_TARGET_DIR=`ViashFindTargetDir $VIASH_META_RESOURCES_DIR`

# define meta fields
VIASH_META_NAME="run_grn_evaluation"
VIASH_META_FUNCTIONALITY_NAME="run_grn_evaluation"
VIASH_META_EXECUTABLE="$VIASH_META_RESOURCES_DIR/$VIASH_META_NAME"
VIASH_META_CONFIG="$VIASH_META_RESOURCES_DIR/.config.vsh.yaml"
VIASH_META_TEMP_DIR="$VIASH_TEMP"



# initialise variables
VIASH_MODE='run'
VIASH_ENGINE_ID='native'


# ViashHelp: Display helpful explanation about this executable
function ViashHelp {
  echo "run_grn_evaluation build_main"
  echo ""
  echo "Inputs:"
  echo "    --evaluation_data"
  echo "        type: file, required parameter, file must exist"
  echo ""
  echo "    --prediction"
  echo "        type: file, required parameter, file must exist"
  echo ""
  echo "    --tf_all"
  echo "        type: file, required parameter, file must exist"
  echo "        example: resources_test/grn_benchmark/prior/tf_all.csv"
  echo ""
  echo "    --reg_type"
  echo "        type: string"
  echo "        default: ridge"
  echo "        name of regretion to use"
  echo ""
  echo "    --subsample"
  echo "        type: integer"
  echo "        default: -1"
  echo "        number of samples randomly drawn from perturbation data"
  echo ""
  echo "    --num_workers"
  echo "        type: integer"
  echo "        default: 4"
  echo ""
  echo "    --apply_tf"
  echo "        type: boolean"
  echo "        default: true"
  echo ""
  echo "    --apply_skeleton"
  echo "        type: boolean"
  echo "        default: false"
  echo ""
  echo "    --skeleton"
  echo "        type: file, file must exist"
  echo ""
  echo "    --regulators_consensus"
  echo "        type: file, required parameter"
  echo "        example:"
  echo "resources_test/grn_benchmark/prior/regulators_consensus_norman.json"
  echo ""
  echo "    --ws_consensus"
  echo "        type: file"
  echo "        example: resources_test/grn_benchmark/prior/ws_consensus_norman.csv"
  echo ""
  echo "    --ws_distance_background"
  echo "        type: file"
  echo "        example:"
  echo "resources_test/grn_benchmark/prior/ws_distance_background_norman.csv"
  echo ""
  echo "    --evaluation_data_sc"
  echo "        type: file, file must exist"
  echo "        example: resources_test/datasets_raw/adamson_sc_counts.h5ad"
  echo ""
  echo "Outputs:"
  echo "    --scores"
  echo "        type: file, required parameter, output, file must exist"
  echo "        default: scores.yaml"
  echo ""
  echo "    --metric_configs"
  echo "        type: file, required parameter, output, file must exist"
  echo "        default: metric_configs.yaml"
  echo ""
  echo "Arguments:"
  echo "    --metric_ids"
  echo "        type: string, multiple values allowed"
  echo "        A list of metric ids to run. If not specified, all metric will be run."
  echo ""
  echo "Viash built in Computational Requirements:"
  echo "    ---cpus=INT"
  echo "        Number of CPUs to use"
  echo "    ---memory=STRING"
  echo "        Amount of memory to use. Examples: 4GB, 3MiB."
  echo ""
  echo "Viash built in Engines:"
  echo "    ---engine=ENGINE_ID"
  echo "        Specify the engine to use. Options are: native."
  echo "        Default: native"
}

# initialise array
VIASH_POSITIONAL_ARGS=''

while [[ $# -gt 0 ]]; do
    case "$1" in
        -h|--help)
            ViashHelp
            exit
            ;;
        ---v|---verbose)
            let "VIASH_VERBOSITY=VIASH_VERBOSITY+1"
            shift 1
            ;;
        ---verbosity)
            VIASH_VERBOSITY="$2"
            shift 2
            ;;
        ---verbosity=*)
            VIASH_VERBOSITY="$(ViashRemoveFlags "$1")"
            shift 1
            ;;
        --version)
            echo "run_grn_evaluation build_main"
            exit
            ;;
        --evaluation_data)
            [ -n "$VIASH_PAR_EVALUATION_DATA" ] && ViashError Bad arguments for option \'--evaluation_data\': \'$VIASH_PAR_EVALUATION_DATA\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_EVALUATION_DATA="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to --evaluation_data. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        --evaluation_data=*)
            [ -n "$VIASH_PAR_EVALUATION_DATA" ] && ViashError Bad arguments for option \'--evaluation_data=*\': \'$VIASH_PAR_EVALUATION_DATA\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_EVALUATION_DATA=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --prediction)
            [ -n "$VIASH_PAR_PREDICTION" ] && ViashError Bad arguments for option \'--prediction\': \'$VIASH_PAR_PREDICTION\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_PREDICTION="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to --prediction. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        --prediction=*)
            [ -n "$VIASH_PAR_PREDICTION" ] && ViashError Bad arguments for option \'--prediction=*\': \'$VIASH_PAR_PREDICTION\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_PREDICTION=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --tf_all)
            [ -n "$VIASH_PAR_TF_ALL" ] && ViashError Bad arguments for option \'--tf_all\': \'$VIASH_PAR_TF_ALL\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_TF_ALL="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to --tf_all. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        --tf_all=*)
            [ -n "$VIASH_PAR_TF_ALL" ] && ViashError Bad arguments for option \'--tf_all=*\': \'$VIASH_PAR_TF_ALL\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_TF_ALL=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --reg_type)
            [ -n "$VIASH_PAR_REG_TYPE" ] && ViashError Bad arguments for option \'--reg_type\': \'$VIASH_PAR_REG_TYPE\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_REG_TYPE="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to --reg_type. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        --reg_type=*)
            [ -n "$VIASH_PAR_REG_TYPE" ] && ViashError Bad arguments for option \'--reg_type=*\': \'$VIASH_PAR_REG_TYPE\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_REG_TYPE=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --subsample)
            [ -n "$VIASH_PAR_SUBSAMPLE" ] && ViashError Bad arguments for option \'--subsample\': \'$VIASH_PAR_SUBSAMPLE\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_SUBSAMPLE="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to --subsample. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        --subsample=*)
            [ -n "$VIASH_PAR_SUBSAMPLE" ] && ViashError Bad arguments for option \'--subsample=*\': \'$VIASH_PAR_SUBSAMPLE\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_SUBSAMPLE=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --num_workers)
            [ -n "$VIASH_PAR_NUM_WORKERS" ] && ViashError Bad arguments for option \'--num_workers\': \'$VIASH_PAR_NUM_WORKERS\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_NUM_WORKERS="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to --num_workers. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        --num_workers=*)
            [ -n "$VIASH_PAR_NUM_WORKERS" ] && ViashError Bad arguments for option \'--num_workers=*\': \'$VIASH_PAR_NUM_WORKERS\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_NUM_WORKERS=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --apply_tf)
            [ -n "$VIASH_PAR_APPLY_TF" ] && ViashError Bad arguments for option \'--apply_tf\': \'$VIASH_PAR_APPLY_TF\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_APPLY_TF="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to --apply_tf. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        --apply_tf=*)
            [ -n "$VIASH_PAR_APPLY_TF" ] && ViashError Bad arguments for option \'--apply_tf=*\': \'$VIASH_PAR_APPLY_TF\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_APPLY_TF=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --apply_skeleton)
            [ -n "$VIASH_PAR_APPLY_SKELETON" ] && ViashError Bad arguments for option \'--apply_skeleton\': \'$VIASH_PAR_APPLY_SKELETON\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_APPLY_SKELETON="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to --apply_skeleton. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        --apply_skeleton=*)
            [ -n "$VIASH_PAR_APPLY_SKELETON" ] && ViashError Bad arguments for option \'--apply_skeleton=*\': \'$VIASH_PAR_APPLY_SKELETON\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_APPLY_SKELETON=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --skeleton)
            [ -n "$VIASH_PAR_SKELETON" ] && ViashError Bad arguments for option \'--skeleton\': \'$VIASH_PAR_SKELETON\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_SKELETON="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to --skeleton. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        --skeleton=*)
            [ -n "$VIASH_PAR_SKELETON" ] && ViashError Bad arguments for option \'--skeleton=*\': \'$VIASH_PAR_SKELETON\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_SKELETON=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --regulators_consensus)
            [ -n "$VIASH_PAR_REGULATORS_CONSENSUS" ] && ViashError Bad arguments for option \'--regulators_consensus\': \'$VIASH_PAR_REGULATORS_CONSENSUS\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_REGULATORS_CONSENSUS="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to --regulators_consensus. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        --regulators_consensus=*)
            [ -n "$VIASH_PAR_REGULATORS_CONSENSUS" ] && ViashError Bad arguments for option \'--regulators_consensus=*\': \'$VIASH_PAR_REGULATORS_CONSENSUS\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_REGULATORS_CONSENSUS=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --ws_consensus)
            [ -n "$VIASH_PAR_WS_CONSENSUS" ] && ViashError Bad arguments for option \'--ws_consensus\': \'$VIASH_PAR_WS_CONSENSUS\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_WS_CONSENSUS="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to --ws_consensus. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        --ws_consensus=*)
            [ -n "$VIASH_PAR_WS_CONSENSUS" ] && ViashError Bad arguments for option \'--ws_consensus=*\': \'$VIASH_PAR_WS_CONSENSUS\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_WS_CONSENSUS=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --ws_distance_background)
            [ -n "$VIASH_PAR_WS_DISTANCE_BACKGROUND" ] && ViashError Bad arguments for option \'--ws_distance_background\': \'$VIASH_PAR_WS_DISTANCE_BACKGROUND\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_WS_DISTANCE_BACKGROUND="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to --ws_distance_background. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        --ws_distance_background=*)
            [ -n "$VIASH_PAR_WS_DISTANCE_BACKGROUND" ] && ViashError Bad arguments for option \'--ws_distance_background=*\': \'$VIASH_PAR_WS_DISTANCE_BACKGROUND\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_WS_DISTANCE_BACKGROUND=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --evaluation_data_sc)
            [ -n "$VIASH_PAR_EVALUATION_DATA_SC" ] && ViashError Bad arguments for option \'--evaluation_data_sc\': \'$VIASH_PAR_EVALUATION_DATA_SC\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_EVALUATION_DATA_SC="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to --evaluation_data_sc. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        --evaluation_data_sc=*)
            [ -n "$VIASH_PAR_EVALUATION_DATA_SC" ] && ViashError Bad arguments for option \'--evaluation_data_sc=*\': \'$VIASH_PAR_EVALUATION_DATA_SC\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_EVALUATION_DATA_SC=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --scores)
            [ -n "$VIASH_PAR_SCORES" ] && ViashError Bad arguments for option \'--scores\': \'$VIASH_PAR_SCORES\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_SCORES="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to --scores. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        --scores=*)
            [ -n "$VIASH_PAR_SCORES" ] && ViashError Bad arguments for option \'--scores=*\': \'$VIASH_PAR_SCORES\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_SCORES=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --metric_configs)
            [ -n "$VIASH_PAR_METRIC_CONFIGS" ] && ViashError Bad arguments for option \'--metric_configs\': \'$VIASH_PAR_METRIC_CONFIGS\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_METRIC_CONFIGS="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to --metric_configs. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        --metric_configs=*)
            [ -n "$VIASH_PAR_METRIC_CONFIGS" ] && ViashError Bad arguments for option \'--metric_configs=*\': \'$VIASH_PAR_METRIC_CONFIGS\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_METRIC_CONFIGS=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --metric_ids)
            if [ -z "$VIASH_PAR_METRIC_IDS" ]; then
              VIASH_PAR_METRIC_IDS="$2"
            else
              VIASH_PAR_METRIC_IDS="$VIASH_PAR_METRIC_IDS;""$2"
            fi
            [ $# -lt 2 ] && ViashError Not enough arguments passed to --metric_ids. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        --metric_ids=*)
            if [ -z "$VIASH_PAR_METRIC_IDS" ]; then
              VIASH_PAR_METRIC_IDS=$(ViashRemoveFlags "$1")
            else
              VIASH_PAR_METRIC_IDS="$VIASH_PAR_METRIC_IDS;"$(ViashRemoveFlags "$1")
            fi
            shift 1
            ;;
        ---engine)
            VIASH_ENGINE_ID="$2"
            shift 2
            ;;
        ---engine=*)
            VIASH_ENGINE_ID="$(ViashRemoveFlags "$1")"
            shift 1
            ;;
        ---cpus)
            [ -n "$VIASH_META_CPUS" ] && ViashError Bad arguments for option \'---cpus\': \'$VIASH_META_CPUS\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_META_CPUS="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to ---cpus. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        ---cpus=*)
            [ -n "$VIASH_META_CPUS" ] && ViashError Bad arguments for option \'---cpus=*\': \'$VIASH_META_CPUS\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_META_CPUS=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        ---memory)
            [ -n "$VIASH_META_MEMORY" ] && ViashError Bad arguments for option \'---memory\': \'$VIASH_META_MEMORY\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_META_MEMORY="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to ---memory. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        ---memory=*)
            [ -n "$VIASH_META_MEMORY" ] && ViashError Bad arguments for option \'---memory=*\': \'$VIASH_META_MEMORY\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_META_MEMORY=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        *)  # positional arg or unknown option
            # since the positional args will be eval'd, can we always quote, instead of using ViashQuote
            VIASH_POSITIONAL_ARGS="$VIASH_POSITIONAL_ARGS '$1'"
            [[ $1 == -* ]] && ViashWarning $1 looks like a parameter but is not a defined parameter and will instead be treated as a positional argument. Use "--help" to get more information on the parameters.
            shift # past argument
            ;;
    esac
done

# parse positional parameters
eval set -- $VIASH_POSITIONAL_ARGS


if   [ "$VIASH_ENGINE_ID" == "native" ]  ; then
  VIASH_ENGINE_TYPE='native'
else
  ViashError "Engine '$VIASH_ENGINE_ID' is not recognized. Options are: native."
  exit 1
fi

# setting computational defaults

# helper function for parsing memory strings
function ViashMemoryAsBytes {
  local memory=`echo "$1" | tr '[:upper:]' '[:lower:]' | tr -d '[:space:]'`
  local memory_regex='^([0-9]+)([kmgtp]i?b?|b)$'
  if [[ $memory =~ $memory_regex ]]; then
    local number=${memory/[^0-9]*/}
    local symbol=${memory/*[0-9]/}
    
    case $symbol in
      b)      memory_b=$number ;;
      kb|k)   memory_b=$(( $number * 1000 )) ;;
      mb|m)   memory_b=$(( $number * 1000 * 1000 )) ;;
      gb|g)   memory_b=$(( $number * 1000 * 1000 * 1000 )) ;;
      tb|t)   memory_b=$(( $number * 1000 * 1000 * 1000 * 1000 )) ;;
      pb|p)   memory_b=$(( $number * 1000 * 1000 * 1000 * 1000 * 1000 )) ;;
      kib|ki)   memory_b=$(( $number * 1024 )) ;;
      mib|mi)   memory_b=$(( $number * 1024 * 1024 )) ;;
      gib|gi)   memory_b=$(( $number * 1024 * 1024 * 1024 )) ;;
      tib|ti)   memory_b=$(( $number * 1024 * 1024 * 1024 * 1024 )) ;;
      pib|pi)   memory_b=$(( $number * 1024 * 1024 * 1024 * 1024 * 1024 )) ;;
    esac
    echo "$memory_b"
  fi
}
# compute memory in different units
if [ ! -z ${VIASH_META_MEMORY+x} ]; then
  VIASH_META_MEMORY_B=`ViashMemoryAsBytes $VIASH_META_MEMORY`
  # do not define other variables if memory_b is an empty string
  if [ ! -z "$VIASH_META_MEMORY_B" ]; then
    VIASH_META_MEMORY_KB=$(( ($VIASH_META_MEMORY_B+999) / 1000 ))
    VIASH_META_MEMORY_MB=$(( ($VIASH_META_MEMORY_KB+999) / 1000 ))
    VIASH_META_MEMORY_GB=$(( ($VIASH_META_MEMORY_MB+999) / 1000 ))
    VIASH_META_MEMORY_TB=$(( ($VIASH_META_MEMORY_GB+999) / 1000 ))
    VIASH_META_MEMORY_PB=$(( ($VIASH_META_MEMORY_TB+999) / 1000 ))
    VIASH_META_MEMORY_KIB=$(( ($VIASH_META_MEMORY_B+1023) / 1024 ))
    VIASH_META_MEMORY_MIB=$(( ($VIASH_META_MEMORY_KIB+1023) / 1024 ))
    VIASH_META_MEMORY_GIB=$(( ($VIASH_META_MEMORY_MIB+1023) / 1024 ))
    VIASH_META_MEMORY_TIB=$(( ($VIASH_META_MEMORY_GIB+1023) / 1024 ))
    VIASH_META_MEMORY_PIB=$(( ($VIASH_META_MEMORY_TIB+1023) / 1024 ))
  else
    # unset memory if string is empty
    unset $VIASH_META_MEMORY_B
  fi
fi
# unset nproc if string is empty
if [ -z "$VIASH_META_CPUS" ]; then
  unset $VIASH_META_CPUS
fi


# check whether required parameters exist
if [ -z ${VIASH_PAR_EVALUATION_DATA+x} ]; then
  ViashError '--evaluation_data' is a required argument. Use "--help" to get more information on the parameters.
  exit 1
fi
if [ -z ${VIASH_PAR_PREDICTION+x} ]; then
  ViashError '--prediction' is a required argument. Use "--help" to get more information on the parameters.
  exit 1
fi
if [ -z ${VIASH_PAR_TF_ALL+x} ]; then
  ViashError '--tf_all' is a required argument. Use "--help" to get more information on the parameters.
  exit 1
fi
if [ -z ${VIASH_PAR_REGULATORS_CONSENSUS+x} ]; then
  ViashError '--regulators_consensus' is a required argument. Use "--help" to get more information on the parameters.
  exit 1
fi
if [ -z ${VIASH_PAR_SCORES+x} ]; then
  ViashError '--scores' is a required argument. Use "--help" to get more information on the parameters.
  exit 1
fi
if [ -z ${VIASH_PAR_METRIC_CONFIGS+x} ]; then
  ViashError '--metric_configs' is a required argument. Use "--help" to get more information on the parameters.
  exit 1
fi
if [ -z ${VIASH_META_NAME+x} ]; then
  ViashError 'name' is a required argument. Use "--help" to get more information on the parameters.
  exit 1
fi
if [ -z ${VIASH_META_FUNCTIONALITY_NAME+x} ]; then
  ViashError 'functionality_name' is a required argument. Use "--help" to get more information on the parameters.
  exit 1
fi
if [ -z ${VIASH_META_RESOURCES_DIR+x} ]; then
  ViashError 'resources_dir' is a required argument. Use "--help" to get more information on the parameters.
  exit 1
fi
if [ -z ${VIASH_META_EXECUTABLE+x} ]; then
  ViashError 'executable' is a required argument. Use "--help" to get more information on the parameters.
  exit 1
fi
if [ -z ${VIASH_META_CONFIG+x} ]; then
  ViashError 'config' is a required argument. Use "--help" to get more information on the parameters.
  exit 1
fi
if [ -z ${VIASH_META_TEMP_DIR+x} ]; then
  ViashError 'temp_dir' is a required argument. Use "--help" to get more information on the parameters.
  exit 1
fi

# filling in defaults
if [ -z ${VIASH_PAR_REG_TYPE+x} ]; then
  VIASH_PAR_REG_TYPE="ridge"
fi
if [ -z ${VIASH_PAR_SUBSAMPLE+x} ]; then
  VIASH_PAR_SUBSAMPLE="-1"
fi
if [ -z ${VIASH_PAR_NUM_WORKERS+x} ]; then
  VIASH_PAR_NUM_WORKERS="4"
fi
if [ -z ${VIASH_PAR_APPLY_TF+x} ]; then
  VIASH_PAR_APPLY_TF="true"
fi
if [ -z ${VIASH_PAR_APPLY_SKELETON+x} ]; then
  VIASH_PAR_APPLY_SKELETON="false"
fi

# check whether required files exist
if [ ! -z "$VIASH_PAR_EVALUATION_DATA" ] && [ ! -e "$VIASH_PAR_EVALUATION_DATA" ]; then
  ViashError "Input file '$VIASH_PAR_EVALUATION_DATA' does not exist."
  exit 1
fi
if [ ! -z "$VIASH_PAR_PREDICTION" ] && [ ! -e "$VIASH_PAR_PREDICTION" ]; then
  ViashError "Input file '$VIASH_PAR_PREDICTION' does not exist."
  exit 1
fi
if [ ! -z "$VIASH_PAR_TF_ALL" ] && [ ! -e "$VIASH_PAR_TF_ALL" ]; then
  ViashError "Input file '$VIASH_PAR_TF_ALL' does not exist."
  exit 1
fi
if [ ! -z "$VIASH_PAR_SKELETON" ] && [ ! -e "$VIASH_PAR_SKELETON" ]; then
  ViashError "Input file '$VIASH_PAR_SKELETON' does not exist."
  exit 1
fi
if [ ! -z "$VIASH_PAR_EVALUATION_DATA_SC" ] && [ ! -e "$VIASH_PAR_EVALUATION_DATA_SC" ]; then
  ViashError "Input file '$VIASH_PAR_EVALUATION_DATA_SC' does not exist."
  exit 1
fi

# check whether parameters values are of the right type
if [[ -n "$VIASH_PAR_SUBSAMPLE" ]]; then
  if ! [[ "$VIASH_PAR_SUBSAMPLE" =~ ^[-+]?[0-9]+$ ]]; then
    ViashError '--subsample' has to be an integer. Use "--help" to get more information on the parameters.
    exit 1
  fi
fi
if [[ -n "$VIASH_PAR_NUM_WORKERS" ]]; then
  if ! [[ "$VIASH_PAR_NUM_WORKERS" =~ ^[-+]?[0-9]+$ ]]; then
    ViashError '--num_workers' has to be an integer. Use "--help" to get more information on the parameters.
    exit 1
  fi
fi
if [[ -n "$VIASH_PAR_APPLY_TF" ]]; then
  if ! [[ "$VIASH_PAR_APPLY_TF" =~ ^(true|True|TRUE|false|False|FALSE|yes|Yes|YES|no|No|NO)$ ]]; then
    ViashError '--apply_tf' has to be a boolean. Use "--help" to get more information on the parameters.
    exit 1
  fi
fi
if [[ -n "$VIASH_PAR_APPLY_SKELETON" ]]; then
  if ! [[ "$VIASH_PAR_APPLY_SKELETON" =~ ^(true|True|TRUE|false|False|FALSE|yes|Yes|YES|no|No|NO)$ ]]; then
    ViashError '--apply_skeleton' has to be a boolean. Use "--help" to get more information on the parameters.
    exit 1
  fi
fi
if [[ -n "$VIASH_META_CPUS" ]]; then
  if ! [[ "$VIASH_META_CPUS" =~ ^[-+]?[0-9]+$ ]]; then
    ViashError 'cpus' has to be an integer. Use "--help" to get more information on the parameters.
    exit 1
  fi
fi
if [[ -n "$VIASH_META_MEMORY_B" ]]; then
  if ! [[ "$VIASH_META_MEMORY_B" =~ ^[-+]?[0-9]+$ ]]; then
    ViashError 'memory_b' has to be a long. Use "--help" to get more information on the parameters.
    exit 1
  fi
fi
if [[ -n "$VIASH_META_MEMORY_KB" ]]; then
  if ! [[ "$VIASH_META_MEMORY_KB" =~ ^[-+]?[0-9]+$ ]]; then
    ViashError 'memory_kb' has to be a long. Use "--help" to get more information on the parameters.
    exit 1
  fi
fi
if [[ -n "$VIASH_META_MEMORY_MB" ]]; then
  if ! [[ "$VIASH_META_MEMORY_MB" =~ ^[-+]?[0-9]+$ ]]; then
    ViashError 'memory_mb' has to be a long. Use "--help" to get more information on the parameters.
    exit 1
  fi
fi
if [[ -n "$VIASH_META_MEMORY_GB" ]]; then
  if ! [[ "$VIASH_META_MEMORY_GB" =~ ^[-+]?[0-9]+$ ]]; then
    ViashError 'memory_gb' has to be a long. Use "--help" to get more information on the parameters.
    exit 1
  fi
fi
if [[ -n "$VIASH_META_MEMORY_TB" ]]; then
  if ! [[ "$VIASH_META_MEMORY_TB" =~ ^[-+]?[0-9]+$ ]]; then
    ViashError 'memory_tb' has to be a long. Use "--help" to get more information on the parameters.
    exit 1
  fi
fi
if [[ -n "$VIASH_META_MEMORY_PB" ]]; then
  if ! [[ "$VIASH_META_MEMORY_PB" =~ ^[-+]?[0-9]+$ ]]; then
    ViashError 'memory_pb' has to be a long. Use "--help" to get more information on the parameters.
    exit 1
  fi
fi
if [[ -n "$VIASH_META_MEMORY_KIB" ]]; then
  if ! [[ "$VIASH_META_MEMORY_KIB" =~ ^[-+]?[0-9]+$ ]]; then
    ViashError 'memory_kib' has to be a long. Use "--help" to get more information on the parameters.
    exit 1
  fi
fi
if [[ -n "$VIASH_META_MEMORY_MIB" ]]; then
  if ! [[ "$VIASH_META_MEMORY_MIB" =~ ^[-+]?[0-9]+$ ]]; then
    ViashError 'memory_mib' has to be a long. Use "--help" to get more information on the parameters.
    exit 1
  fi
fi
if [[ -n "$VIASH_META_MEMORY_GIB" ]]; then
  if ! [[ "$VIASH_META_MEMORY_GIB" =~ ^[-+]?[0-9]+$ ]]; then
    ViashError 'memory_gib' has to be a long. Use "--help" to get more information on the parameters.
    exit 1
  fi
fi
if [[ -n "$VIASH_META_MEMORY_TIB" ]]; then
  if ! [[ "$VIASH_META_MEMORY_TIB" =~ ^[-+]?[0-9]+$ ]]; then
    ViashError 'memory_tib' has to be a long. Use "--help" to get more information on the parameters.
    exit 1
  fi
fi
if [[ -n "$VIASH_META_MEMORY_PIB" ]]; then
  if ! [[ "$VIASH_META_MEMORY_PIB" =~ ^[-+]?[0-9]+$ ]]; then
    ViashError 'memory_pib' has to be a long. Use "--help" to get more information on the parameters.
    exit 1
  fi
fi

# create parent directories of output files, if so desired
if [ ! -z "$VIASH_PAR_SCORES" ] && [ ! -d "$(dirname "$VIASH_PAR_SCORES")" ]; then
  mkdir -p "$(dirname "$VIASH_PAR_SCORES")"
fi
if [ ! -z "$VIASH_PAR_METRIC_CONFIGS" ] && [ ! -d "$(dirname "$VIASH_PAR_METRIC_CONFIGS")" ]; then
  mkdir -p "$(dirname "$VIASH_PAR_METRIC_CONFIGS")"
fi

if  [ "$VIASH_ENGINE_ID" == "native" ]  ; then
  if [ "$VIASH_MODE" == "run" ]; then
    VIASH_CMD="bash"
  else
    ViashError "Engine '$VIASH_ENGINE_ID' does not support mode '$VIASH_MODE'."
    exit 1
  fi
fi


# set dependency paths
VIASH_DEP_METRICS_REGRESSION_2="$VIASH_META_RESOURCES_DIR/../../../nextflow/metrics/regression_2/main.nf"
VIASH_DEP_METRICS_REGRESSION_1="$VIASH_META_RESOURCES_DIR/../../../nextflow/metrics/regression_1/main.nf"
VIASH_DEP_METRICS_WS_DISTANCE="$VIASH_META_RESOURCES_DIR/../../../nextflow/metrics/ws_distance/main.nf"
VIASH_DEP_UTILS_EXTRACT_UNS_METADATA="$VIASH_TARGET_DIR/dependencies/github/openproblems-bio/openproblems/build/main/nextflow/utils/extract_uns_metadata/main.nf"

ViashDebug "Running command: $(echo $VIASH_CMD)"
cat << VIASHEOF | eval $VIASH_CMD
set -e
tempscript=\$(mktemp "$VIASH_META_TEMP_DIR/viash-run-run_grn_evaluation-XXXXXX").nf
function clean_up {
  rm "\$tempscript"
}
function interrupt {
  echo -e "\nCTRL-C Pressed..."
  exit 1
}
trap clean_up EXIT
trap interrupt INT SIGINT
cat > "\$tempscript" << 'VIASHMAIN'
//// VIASH START
// The following code has been auto-generated by Viash.

//// VIASH END
  
workflow auto {
  findStatesTemp(params, meta.config)
    | meta.workflow.run(
      auto: [publish: "state"]
    )
}

workflow run_wf {
  take:
  input_ch

  main:

  // construct list of metrics
  metrics = [
    regression_1,
    regression_2,
    ws_distance
  ]
    
  /***************************
   * RUN METRICS *
   ***************************/
  output_ch = input_ch
    | map{ id, state ->
        [id, state + ["_meta": [join_id: id]]]
      }
    

    // run all metrics
    | runEach(
      components: metrics,
      filter: { id, state, comp ->
        !state.metric_ids || state.metric_ids.contains(comp.config.name)
      },
      id: { id, state, comp ->
        id + "." + comp.config.name
      },
      // use 'fromState' to fetch the arguments the component requires from the overall state
      fromState: [
        evaluation_data: "evaluation_data",
        evaluation_data_sc: "evaluation_data_sc",
        prediction: "prediction",
        ws_distance_background: "ws_distance_background",
        subsample: "subsample",
        reg_type: "reg_type",
        apply_tf: "apply_tf",
        apply_skeleton: "apply_skeleton",
        skeleton: "skeleton",
        num_workers: "num_workers",
        regulators_consensus: "regulators_consensus",
        ws_consensus: "ws_consensus",
        tf_all: "tf_all"
      ],
      // use 'toState' to publish that component's outputs to the overall state
      toState: { id, output, state, comp ->
        state + [
          metric_id: comp.config.name,
          metric_output: output.score
        ]
      }
    )

    // extract the scores
    | extract_uns_metadata.run(
      key: "extract_scores",
      fromState: [input: "metric_output"],
      toState: { id, output, state ->
        state + [
          score_uns: readYaml(output.output).uns
        ]
      }
    )

    | joinStates { ids, states ->
      assert states[0]._meta, "no _meta found in state[0]"
      // store the metric configs in a file
      def metric_configs = metrics.collect{it.config}
      def metric_configs_yaml_blob = toYamlBlob(metric_configs)
      def metric_configs_file = tempFile("metric_configs.yaml")
      metric_configs_file.write(metric_configs_yaml_blob)

      // store the scores in a file
      def score_uns = states.collect{it.score_uns}
      def score_uns_yaml_blob = toYamlBlob(score_uns)
      def score_uns_file = tempFile("score_uns.yaml")
      score_uns_file.write(score_uns_yaml_blob)

      def new_state = [
        metric_configs: metric_configs_file,
        scores: score_uns_file,
        _meta: states[0]._meta
      ]

      ["output", new_state]
    }

  emit:
  output_ch
}
VIASHMAIN
nextflow run . -main-script "\$tempscript" &
wait "\$!"

VIASHEOF


# check whether required files exist
if [ ! -z "$VIASH_PAR_SCORES" ] && [ ! -e "$VIASH_PAR_SCORES" ]; then
  ViashError "Output file '$VIASH_PAR_SCORES' does not exist."
  exit 1
fi
if [ ! -z "$VIASH_PAR_METRIC_CONFIGS" ] && [ ! -e "$VIASH_PAR_METRIC_CONFIGS" ]; then
  ViashError "Output file '$VIASH_PAR_METRIC_CONFIGS' does not exist."
  exit 1
fi


exit 0
