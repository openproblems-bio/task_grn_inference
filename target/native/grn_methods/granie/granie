#!/usr/bin/env bash

# granie build-main
# 
# This wrapper script is auto-generated by viash 0.8.6 and is thus a derivative
# work thereof. This software comes with ABSOLUTELY NO WARRANTY from Data
# Intuitive.
# 
# The component may contain files which fall under a different license. The
# authors of this component should specify the license in the header of such
# files, or include a separate license file detailing the licenses of all included
# files.

set -e

if [ -z "$VIASH_TEMP" ]; then
  VIASH_TEMP=${VIASH_TEMP:-$VIASH_TMPDIR}
  VIASH_TEMP=${VIASH_TEMP:-$VIASH_TEMPDIR}
  VIASH_TEMP=${VIASH_TEMP:-$VIASH_TMP}
  VIASH_TEMP=${VIASH_TEMP:-$TMPDIR}
  VIASH_TEMP=${VIASH_TEMP:-$TMP}
  VIASH_TEMP=${VIASH_TEMP:-$TEMPDIR}
  VIASH_TEMP=${VIASH_TEMP:-$TEMP}
  VIASH_TEMP=${VIASH_TEMP:-/tmp}
fi

# define helper functions
# ViashQuote: put quotes around non flag values
# $1     : unquoted string
# return : possibly quoted string
# examples:
#   ViashQuote --foo      # returns --foo
#   ViashQuote bar        # returns 'bar'
#   Viashquote --foo=bar  # returns --foo='bar'
function ViashQuote {
  if [[ "$1" =~ ^-+[a-zA-Z0-9_\-]+=.+$ ]]; then
    echo "$1" | sed "s#=\(.*\)#='\1'#"
  elif [[ "$1" =~ ^-+[a-zA-Z0-9_\-]+$ ]]; then
    echo "$1"
  else
    echo "'$1'"
  fi
}
# ViashRemoveFlags: Remove leading flag
# $1     : string with a possible leading flag
# return : string without possible leading flag
# examples:
#   ViashRemoveFlags --foo=bar  # returns bar
function ViashRemoveFlags {
  echo "$1" | sed 's/^--*[a-zA-Z0-9_\-]*=//'
}
# ViashSourceDir: return the path of a bash file, following symlinks
# usage   : ViashSourceDir ${BASH_SOURCE[0]}
# $1      : Should always be set to ${BASH_SOURCE[0]}
# returns : The absolute path of the bash file
function ViashSourceDir {
  SOURCE="$1"
  while [ -h "$SOURCE" ]; do
    DIR="$( cd -P "$( dirname "$SOURCE" )" >/dev/null 2>&1 && pwd )"
    SOURCE="$(readlink "$SOURCE")"
    [[ $SOURCE != /* ]] && SOURCE="$DIR/$SOURCE"
  done
  cd -P "$( dirname "$SOURCE" )" >/dev/null 2>&1 && pwd
}
# ViashFindTargetDir: return the path of the '.build.yaml' file, following symlinks
# usage   : ViashFindTargetDir 'ScriptPath'
# $1      : The location from where to start the upward search
# returns : The absolute path of the '.build.yaml' file
function ViashFindTargetDir {
  SOURCE="$1"
  while [[ "$SOURCE" != "" && ! -e "$SOURCE/.build.yaml" ]]; do
    SOURCE=${SOURCE%/*}
  done
  echo $SOURCE
}
# see https://en.wikipedia.org/wiki/Syslog#Severity_level
VIASH_LOGCODE_EMERGENCY=0
VIASH_LOGCODE_ALERT=1
VIASH_LOGCODE_CRITICAL=2
VIASH_LOGCODE_ERROR=3
VIASH_LOGCODE_WARNING=4
VIASH_LOGCODE_NOTICE=5
VIASH_LOGCODE_INFO=6
VIASH_LOGCODE_DEBUG=7
VIASH_VERBOSITY=$VIASH_LOGCODE_NOTICE

# ViashLog: Log events depending on the verbosity level
# usage: ViashLog 1 alert Oh no something went wrong!
# $1: required verbosity level
# $2: display tag
# $3+: messages to display
# stdout: Your input, prepended by '[$2] '.
function ViashLog {
  local required_level="$1"
  local display_tag="$2"
  shift 2
  if [ $VIASH_VERBOSITY -ge $required_level ]; then
    >&2 echo "[$display_tag]" "$@"
  fi
}

# ViashEmergency: log events when the system is unstable
# usage: ViashEmergency Oh no something went wrong.
# stdout: Your input, prepended by '[emergency] '.
function ViashEmergency {
  ViashLog $VIASH_LOGCODE_EMERGENCY emergency "$@"
}

# ViashAlert: log events when actions must be taken immediately (e.g. corrupted system database)
# usage: ViashAlert Oh no something went wrong.
# stdout: Your input, prepended by '[alert] '.
function ViashAlert {
  ViashLog $VIASH_LOGCODE_ALERT alert "$@"
}

# ViashCritical: log events when a critical condition occurs
# usage: ViashCritical Oh no something went wrong.
# stdout: Your input, prepended by '[critical] '.
function ViashCritical {
  ViashLog $VIASH_LOGCODE_CRITICAL critical "$@"
}

# ViashError: log events when an error condition occurs
# usage: ViashError Oh no something went wrong.
# stdout: Your input, prepended by '[error] '.
function ViashError {
  ViashLog $VIASH_LOGCODE_ERROR error "$@"
}

# ViashWarning: log potentially abnormal events
# usage: ViashWarning Something may have gone wrong.
# stdout: Your input, prepended by '[warning] '.
function ViashWarning {
  ViashLog $VIASH_LOGCODE_WARNING warning "$@"
}

# ViashNotice: log significant but normal events
# usage: ViashNotice This just happened.
# stdout: Your input, prepended by '[notice] '.
function ViashNotice {
  ViashLog $VIASH_LOGCODE_NOTICE notice "$@"
}

# ViashInfo: log normal events
# usage: ViashInfo This just happened.
# stdout: Your input, prepended by '[info] '.
function ViashInfo {
  ViashLog $VIASH_LOGCODE_INFO info "$@"
}

# ViashDebug: log all events, for debugging purposes
# usage: ViashDebug This just happened.
# stdout: Your input, prepended by '[debug] '.
function ViashDebug {
  ViashLog $VIASH_LOGCODE_DEBUG debug "$@"
}

# find source folder of this component
VIASH_META_RESOURCES_DIR=`ViashSourceDir ${BASH_SOURCE[0]}`

# find the root of the built components & dependencies
VIASH_TARGET_DIR=`ViashFindTargetDir $VIASH_META_RESOURCES_DIR`

# define meta fields
VIASH_META_FUNCTIONALITY_NAME="granie"
VIASH_META_EXECUTABLE="$VIASH_META_RESOURCES_DIR/$VIASH_META_FUNCTIONALITY_NAME"
VIASH_META_CONFIG="$VIASH_META_RESOURCES_DIR/.config.vsh.yaml"
VIASH_META_TEMP_DIR="$VIASH_TEMP"


# ViashHelp: Display helpful explanation about this executable
function ViashHelp {
  echo "granie build-main"
  echo ""
  echo "Arguments:"
  echo "    --rna_r"
  echo "        type: file, file must exist"
  echo "        example: resources_test/evaluation_datasets/op_rna.rds"
  echo ""
  echo "    --atac_r"
  echo "        type: file, file must exist"
  echo "        example: resources_test/evaluation_datasets/op_atac.rds"
  echo ""
  echo "    --prediction"
  echo "        type: file, output, file must exist"
  echo "        example: resources_test/grn_models/op/collectri.csv"
  echo ""
  echo "    --temp_dir"
  echo "        type: string"
  echo "        default: output/temdir"
  echo ""
  echo "    --num_workers"
  echo "        type: integer"
  echo "        default: 4"
  echo ""
  echo "    --normRNA"
  echo "        type: string"
  echo "        default: SCT"
  echo "        Normalization method for RNA data."
  echo ""
  echo "    --normATAC"
  echo "        type: string"
  echo "        default: LSI"
  echo "        Normalization method for ATAC data."
  echo ""
  echo "    --LSI_featureCutoff"
  echo "        type: string"
  echo "        default: q0"
  echo "        Feature cutoff for LSI normalization."
  echo ""
  echo "    --nDimensions_ATAC"
  echo "        type: integer"
  echo "        default: 50"
  echo "        Number of dimensions for ATAC modality"
  echo ""
  echo "    --integrationMethod"
  echo "        type: string"
  echo "        default: WNN"
  echo "        Method used for data integration."
  echo ""
  echo "    --WNN_knn"
  echo "        type: integer"
  echo "        default: 20"
  echo "        Number of nearest neighbors for WNN integration."
  echo ""
  echo "    --minCellsPerCluster"
  echo "        type: integer"
  echo "        default: 25"
  echo "        Minimum number of cells required per cluster."
  echo ""
  echo "    --preprocessing_clusteringMethod"
  echo "        type: integer"
  echo "        default: 1"
  echo "        Seurat::FindClusters: Clustering method to use (1 = original Louvain"
  echo "        algorithm, 2 = Louvain algorithm with multilevel refinement, 3 = SLM"
  echo "        algorithm, 4 = Leiden algorithm)."
  echo ""
  echo "    --preprocessing_clusterResolution"
  echo "        type: double"
  echo "        default: 14.0"
  echo "        Resolution for clustering, typically between 5 and 20."
  echo ""
  echo "    --preprocessing_RNA_nDimensions"
  echo "        type: integer"
  echo "        default: 50"
  echo "        Number of dimensions for RNA reduction, default is 50."
  echo ""
  echo "    --genomeAssembly"
  echo "        type: string"
  echo "        default: hg38"
  echo "        Genome assembly version (e.g., hg38). Currently, hg38 and mm10 is"
  echo "        supported."
  echo ""
  echo "    --GRaNIE_corMethod"
  echo "        type: string"
  echo "        default: spearman"
  echo "        Correlation method used in GRaNIE (e.g., 'spearman')."
  echo ""
  echo "    --GRaNIE_includeSexChr"
  echo "        type: boolean"
  echo "        default: true"
  echo "        Include sex chromosomes in analysis."
  echo ""
  echo "    --GRaNIE_promoterRange"
  echo "        type: integer"
  echo "        default: 250000"
  echo "        Range in base pairs for maximum distance of peak-gene connections"
  echo "        (default is 250000)."
  echo ""
  echo "    --GRaNIE_TF_peak_fdr_threshold"
  echo "        type: double"
  echo "        default: 0.2"
  echo "        FDR threshold for TF-peak connections (default is 0.2)."
  echo ""
  echo "    --GRaNIE_peak_gene_fdr_threshold"
  echo "        type: double"
  echo "        default: 0.2"
  echo "        FDR threshold for peak-gene connections (default is 0.2)."
  echo ""
  echo "    --useWeightingLinks"
  echo "        type: boolean"
  echo "        default: false"
  echo "        Flag to indicate whether to use weighting links in analysis."
  echo ""
  echo "    --forceRerun"
  echo "        type: boolean"
  echo "        default: false"
  echo "        Flag to force rerun of the analysis regardless of existing results."
  echo ""
  echo "    --subset"
  echo "        type: boolean"
  echo "        default: false"
  echo "        Flag for testing purposes to subset the data for faster running times"
}

# initialise array
VIASH_POSITIONAL_ARGS=''
VIASH_MODE='run'

while [[ $# -gt 0 ]]; do
    case "$1" in
        -h|--help)
            ViashHelp
            exit
            ;;
        ---v|---verbose)
            let "VIASH_VERBOSITY=VIASH_VERBOSITY+1"
            shift 1
            ;;
        ---verbosity)
            VIASH_VERBOSITY="$2"
            shift 2
            ;;
        ---verbosity=*)
            VIASH_VERBOSITY="$(ViashRemoveFlags "$1")"
            shift 1
            ;;
        --version)
            echo "granie build-main"
            exit
            ;;
        --rna_r)
            [ -n "$VIASH_PAR_RNA_R" ] && ViashError Bad arguments for option \'--rna_r\': \'$VIASH_PAR_RNA_R\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_RNA_R="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to --rna_r. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        --rna_r=*)
            [ -n "$VIASH_PAR_RNA_R" ] && ViashError Bad arguments for option \'--rna_r=*\': \'$VIASH_PAR_RNA_R\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_RNA_R=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --atac_r)
            [ -n "$VIASH_PAR_ATAC_R" ] && ViashError Bad arguments for option \'--atac_r\': \'$VIASH_PAR_ATAC_R\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_ATAC_R="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to --atac_r. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        --atac_r=*)
            [ -n "$VIASH_PAR_ATAC_R" ] && ViashError Bad arguments for option \'--atac_r=*\': \'$VIASH_PAR_ATAC_R\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_ATAC_R=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --prediction)
            [ -n "$VIASH_PAR_PREDICTION" ] && ViashError Bad arguments for option \'--prediction\': \'$VIASH_PAR_PREDICTION\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_PREDICTION="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to --prediction. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        --prediction=*)
            [ -n "$VIASH_PAR_PREDICTION" ] && ViashError Bad arguments for option \'--prediction=*\': \'$VIASH_PAR_PREDICTION\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_PREDICTION=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --temp_dir)
            [ -n "$VIASH_PAR_TEMP_DIR" ] && ViashError Bad arguments for option \'--temp_dir\': \'$VIASH_PAR_TEMP_DIR\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_TEMP_DIR="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to --temp_dir. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        --temp_dir=*)
            [ -n "$VIASH_PAR_TEMP_DIR" ] && ViashError Bad arguments for option \'--temp_dir=*\': \'$VIASH_PAR_TEMP_DIR\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_TEMP_DIR=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --num_workers)
            [ -n "$VIASH_PAR_NUM_WORKERS" ] && ViashError Bad arguments for option \'--num_workers\': \'$VIASH_PAR_NUM_WORKERS\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_NUM_WORKERS="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to --num_workers. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        --num_workers=*)
            [ -n "$VIASH_PAR_NUM_WORKERS" ] && ViashError Bad arguments for option \'--num_workers=*\': \'$VIASH_PAR_NUM_WORKERS\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_NUM_WORKERS=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --normRNA)
            [ -n "$VIASH_PAR_NORMRNA" ] && ViashError Bad arguments for option \'--normRNA\': \'$VIASH_PAR_NORMRNA\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_NORMRNA="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to --normRNA. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        --normRNA=*)
            [ -n "$VIASH_PAR_NORMRNA" ] && ViashError Bad arguments for option \'--normRNA=*\': \'$VIASH_PAR_NORMRNA\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_NORMRNA=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --normATAC)
            [ -n "$VIASH_PAR_NORMATAC" ] && ViashError Bad arguments for option \'--normATAC\': \'$VIASH_PAR_NORMATAC\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_NORMATAC="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to --normATAC. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        --normATAC=*)
            [ -n "$VIASH_PAR_NORMATAC" ] && ViashError Bad arguments for option \'--normATAC=*\': \'$VIASH_PAR_NORMATAC\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_NORMATAC=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --LSI_featureCutoff)
            [ -n "$VIASH_PAR_LSI_FEATURECUTOFF" ] && ViashError Bad arguments for option \'--LSI_featureCutoff\': \'$VIASH_PAR_LSI_FEATURECUTOFF\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_LSI_FEATURECUTOFF="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to --LSI_featureCutoff. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        --LSI_featureCutoff=*)
            [ -n "$VIASH_PAR_LSI_FEATURECUTOFF" ] && ViashError Bad arguments for option \'--LSI_featureCutoff=*\': \'$VIASH_PAR_LSI_FEATURECUTOFF\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_LSI_FEATURECUTOFF=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --nDimensions_ATAC)
            [ -n "$VIASH_PAR_NDIMENSIONS_ATAC" ] && ViashError Bad arguments for option \'--nDimensions_ATAC\': \'$VIASH_PAR_NDIMENSIONS_ATAC\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_NDIMENSIONS_ATAC="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to --nDimensions_ATAC. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        --nDimensions_ATAC=*)
            [ -n "$VIASH_PAR_NDIMENSIONS_ATAC" ] && ViashError Bad arguments for option \'--nDimensions_ATAC=*\': \'$VIASH_PAR_NDIMENSIONS_ATAC\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_NDIMENSIONS_ATAC=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --integrationMethod)
            [ -n "$VIASH_PAR_INTEGRATIONMETHOD" ] && ViashError Bad arguments for option \'--integrationMethod\': \'$VIASH_PAR_INTEGRATIONMETHOD\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_INTEGRATIONMETHOD="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to --integrationMethod. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        --integrationMethod=*)
            [ -n "$VIASH_PAR_INTEGRATIONMETHOD" ] && ViashError Bad arguments for option \'--integrationMethod=*\': \'$VIASH_PAR_INTEGRATIONMETHOD\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_INTEGRATIONMETHOD=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --WNN_knn)
            [ -n "$VIASH_PAR_WNN_KNN" ] && ViashError Bad arguments for option \'--WNN_knn\': \'$VIASH_PAR_WNN_KNN\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_WNN_KNN="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to --WNN_knn. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        --WNN_knn=*)
            [ -n "$VIASH_PAR_WNN_KNN" ] && ViashError Bad arguments for option \'--WNN_knn=*\': \'$VIASH_PAR_WNN_KNN\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_WNN_KNN=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --minCellsPerCluster)
            [ -n "$VIASH_PAR_MINCELLSPERCLUSTER" ] && ViashError Bad arguments for option \'--minCellsPerCluster\': \'$VIASH_PAR_MINCELLSPERCLUSTER\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_MINCELLSPERCLUSTER="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to --minCellsPerCluster. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        --minCellsPerCluster=*)
            [ -n "$VIASH_PAR_MINCELLSPERCLUSTER" ] && ViashError Bad arguments for option \'--minCellsPerCluster=*\': \'$VIASH_PAR_MINCELLSPERCLUSTER\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_MINCELLSPERCLUSTER=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --preprocessing_clusteringMethod)
            [ -n "$VIASH_PAR_PREPROCESSING_CLUSTERINGMETHOD" ] && ViashError Bad arguments for option \'--preprocessing_clusteringMethod\': \'$VIASH_PAR_PREPROCESSING_CLUSTERINGMETHOD\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_PREPROCESSING_CLUSTERINGMETHOD="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to --preprocessing_clusteringMethod. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        --preprocessing_clusteringMethod=*)
            [ -n "$VIASH_PAR_PREPROCESSING_CLUSTERINGMETHOD" ] && ViashError Bad arguments for option \'--preprocessing_clusteringMethod=*\': \'$VIASH_PAR_PREPROCESSING_CLUSTERINGMETHOD\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_PREPROCESSING_CLUSTERINGMETHOD=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --preprocessing_clusterResolution)
            [ -n "$VIASH_PAR_PREPROCESSING_CLUSTERRESOLUTION" ] && ViashError Bad arguments for option \'--preprocessing_clusterResolution\': \'$VIASH_PAR_PREPROCESSING_CLUSTERRESOLUTION\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_PREPROCESSING_CLUSTERRESOLUTION="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to --preprocessing_clusterResolution. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        --preprocessing_clusterResolution=*)
            [ -n "$VIASH_PAR_PREPROCESSING_CLUSTERRESOLUTION" ] && ViashError Bad arguments for option \'--preprocessing_clusterResolution=*\': \'$VIASH_PAR_PREPROCESSING_CLUSTERRESOLUTION\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_PREPROCESSING_CLUSTERRESOLUTION=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --preprocessing_RNA_nDimensions)
            [ -n "$VIASH_PAR_PREPROCESSING_RNA_NDIMENSIONS" ] && ViashError Bad arguments for option \'--preprocessing_RNA_nDimensions\': \'$VIASH_PAR_PREPROCESSING_RNA_NDIMENSIONS\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_PREPROCESSING_RNA_NDIMENSIONS="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to --preprocessing_RNA_nDimensions. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        --preprocessing_RNA_nDimensions=*)
            [ -n "$VIASH_PAR_PREPROCESSING_RNA_NDIMENSIONS" ] && ViashError Bad arguments for option \'--preprocessing_RNA_nDimensions=*\': \'$VIASH_PAR_PREPROCESSING_RNA_NDIMENSIONS\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_PREPROCESSING_RNA_NDIMENSIONS=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --genomeAssembly)
            [ -n "$VIASH_PAR_GENOMEASSEMBLY" ] && ViashError Bad arguments for option \'--genomeAssembly\': \'$VIASH_PAR_GENOMEASSEMBLY\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_GENOMEASSEMBLY="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to --genomeAssembly. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        --genomeAssembly=*)
            [ -n "$VIASH_PAR_GENOMEASSEMBLY" ] && ViashError Bad arguments for option \'--genomeAssembly=*\': \'$VIASH_PAR_GENOMEASSEMBLY\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_GENOMEASSEMBLY=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --GRaNIE_corMethod)
            [ -n "$VIASH_PAR_GRANIE_CORMETHOD" ] && ViashError Bad arguments for option \'--GRaNIE_corMethod\': \'$VIASH_PAR_GRANIE_CORMETHOD\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_GRANIE_CORMETHOD="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to --GRaNIE_corMethod. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        --GRaNIE_corMethod=*)
            [ -n "$VIASH_PAR_GRANIE_CORMETHOD" ] && ViashError Bad arguments for option \'--GRaNIE_corMethod=*\': \'$VIASH_PAR_GRANIE_CORMETHOD\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_GRANIE_CORMETHOD=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --GRaNIE_includeSexChr)
            [ -n "$VIASH_PAR_GRANIE_INCLUDESEXCHR" ] && ViashError Bad arguments for option \'--GRaNIE_includeSexChr\': \'$VIASH_PAR_GRANIE_INCLUDESEXCHR\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_GRANIE_INCLUDESEXCHR="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to --GRaNIE_includeSexChr. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        --GRaNIE_includeSexChr=*)
            [ -n "$VIASH_PAR_GRANIE_INCLUDESEXCHR" ] && ViashError Bad arguments for option \'--GRaNIE_includeSexChr=*\': \'$VIASH_PAR_GRANIE_INCLUDESEXCHR\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_GRANIE_INCLUDESEXCHR=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --GRaNIE_promoterRange)
            [ -n "$VIASH_PAR_GRANIE_PROMOTERRANGE" ] && ViashError Bad arguments for option \'--GRaNIE_promoterRange\': \'$VIASH_PAR_GRANIE_PROMOTERRANGE\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_GRANIE_PROMOTERRANGE="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to --GRaNIE_promoterRange. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        --GRaNIE_promoterRange=*)
            [ -n "$VIASH_PAR_GRANIE_PROMOTERRANGE" ] && ViashError Bad arguments for option \'--GRaNIE_promoterRange=*\': \'$VIASH_PAR_GRANIE_PROMOTERRANGE\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_GRANIE_PROMOTERRANGE=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --GRaNIE_TF_peak_fdr_threshold)
            [ -n "$VIASH_PAR_GRANIE_TF_PEAK_FDR_THRESHOLD" ] && ViashError Bad arguments for option \'--GRaNIE_TF_peak_fdr_threshold\': \'$VIASH_PAR_GRANIE_TF_PEAK_FDR_THRESHOLD\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_GRANIE_TF_PEAK_FDR_THRESHOLD="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to --GRaNIE_TF_peak_fdr_threshold. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        --GRaNIE_TF_peak_fdr_threshold=*)
            [ -n "$VIASH_PAR_GRANIE_TF_PEAK_FDR_THRESHOLD" ] && ViashError Bad arguments for option \'--GRaNIE_TF_peak_fdr_threshold=*\': \'$VIASH_PAR_GRANIE_TF_PEAK_FDR_THRESHOLD\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_GRANIE_TF_PEAK_FDR_THRESHOLD=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --GRaNIE_peak_gene_fdr_threshold)
            [ -n "$VIASH_PAR_GRANIE_PEAK_GENE_FDR_THRESHOLD" ] && ViashError Bad arguments for option \'--GRaNIE_peak_gene_fdr_threshold\': \'$VIASH_PAR_GRANIE_PEAK_GENE_FDR_THRESHOLD\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_GRANIE_PEAK_GENE_FDR_THRESHOLD="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to --GRaNIE_peak_gene_fdr_threshold. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        --GRaNIE_peak_gene_fdr_threshold=*)
            [ -n "$VIASH_PAR_GRANIE_PEAK_GENE_FDR_THRESHOLD" ] && ViashError Bad arguments for option \'--GRaNIE_peak_gene_fdr_threshold=*\': \'$VIASH_PAR_GRANIE_PEAK_GENE_FDR_THRESHOLD\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_GRANIE_PEAK_GENE_FDR_THRESHOLD=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --useWeightingLinks)
            [ -n "$VIASH_PAR_USEWEIGHTINGLINKS" ] && ViashError Bad arguments for option \'--useWeightingLinks\': \'$VIASH_PAR_USEWEIGHTINGLINKS\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_USEWEIGHTINGLINKS="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to --useWeightingLinks. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        --useWeightingLinks=*)
            [ -n "$VIASH_PAR_USEWEIGHTINGLINKS" ] && ViashError Bad arguments for option \'--useWeightingLinks=*\': \'$VIASH_PAR_USEWEIGHTINGLINKS\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_USEWEIGHTINGLINKS=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --forceRerun)
            [ -n "$VIASH_PAR_FORCERERUN" ] && ViashError Bad arguments for option \'--forceRerun\': \'$VIASH_PAR_FORCERERUN\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_FORCERERUN="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to --forceRerun. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        --forceRerun=*)
            [ -n "$VIASH_PAR_FORCERERUN" ] && ViashError Bad arguments for option \'--forceRerun=*\': \'$VIASH_PAR_FORCERERUN\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_FORCERERUN=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --subset)
            [ -n "$VIASH_PAR_SUBSET" ] && ViashError Bad arguments for option \'--subset\': \'$VIASH_PAR_SUBSET\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_SUBSET="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to --subset. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        --subset=*)
            [ -n "$VIASH_PAR_SUBSET" ] && ViashError Bad arguments for option \'--subset=*\': \'$VIASH_PAR_SUBSET\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_SUBSET=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        ---cpus)
            [ -n "$VIASH_META_CPUS" ] && ViashError Bad arguments for option \'---cpus\': \'$VIASH_META_CPUS\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_META_CPUS="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to ---cpus. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        ---cpus=*)
            [ -n "$VIASH_META_CPUS" ] && ViashError Bad arguments for option \'---cpus=*\': \'$VIASH_META_CPUS\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_META_CPUS=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        ---memory)
            [ -n "$VIASH_META_MEMORY" ] && ViashError Bad arguments for option \'---memory\': \'$VIASH_META_MEMORY\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_META_MEMORY="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to ---memory. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        ---memory=*)
            [ -n "$VIASH_META_MEMORY" ] && ViashError Bad arguments for option \'---memory=*\': \'$VIASH_META_MEMORY\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_META_MEMORY=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        *)  # positional arg or unknown option
            # since the positional args will be eval'd, can we always quote, instead of using ViashQuote
            VIASH_POSITIONAL_ARGS="$VIASH_POSITIONAL_ARGS '$1'"
            [[ $1 == -* ]] && ViashWarning $1 looks like a parameter but is not a defined parameter and will instead be treated as a positional argument. Use "--help" to get more information on the parameters.
            shift # past argument
            ;;
    esac
done

# parse positional parameters
eval set -- $VIASH_POSITIONAL_ARGS


# setting computational defaults

# helper function for parsing memory strings
function ViashMemoryAsBytes {
  local memory=`echo "$1" | tr '[:upper:]' '[:lower:]' | tr -d '[:space:]'`
  local memory_regex='^([0-9]+)([kmgtp]b?|b)$'
  if [[ $memory =~ $memory_regex ]]; then
    local number=${memory/[^0-9]*/}
    local symbol=${memory/*[0-9]/}
    
    case $symbol in
      b)      memory_b=$number ;;
      kb|k)   memory_b=$(( $number * 1024 )) ;;
      mb|m)   memory_b=$(( $number * 1024 * 1024 )) ;;
      gb|g)   memory_b=$(( $number * 1024 * 1024 * 1024 )) ;;
      tb|t)   memory_b=$(( $number * 1024 * 1024 * 1024 * 1024 )) ;;
      pb|p)   memory_b=$(( $number * 1024 * 1024 * 1024 * 1024 * 1024 )) ;;
    esac
    echo "$memory_b"
  fi
}
# compute memory in different units
if [ ! -z ${VIASH_META_MEMORY+x} ]; then
  VIASH_META_MEMORY_B=`ViashMemoryAsBytes $VIASH_META_MEMORY`
  # do not define other variables if memory_b is an empty string
  if [ ! -z "$VIASH_META_MEMORY_B" ]; then
    VIASH_META_MEMORY_KB=$(( ($VIASH_META_MEMORY_B+1023) / 1024 ))
    VIASH_META_MEMORY_MB=$(( ($VIASH_META_MEMORY_KB+1023) / 1024 ))
    VIASH_META_MEMORY_GB=$(( ($VIASH_META_MEMORY_MB+1023) / 1024 ))
    VIASH_META_MEMORY_TB=$(( ($VIASH_META_MEMORY_GB+1023) / 1024 ))
    VIASH_META_MEMORY_PB=$(( ($VIASH_META_MEMORY_TB+1023) / 1024 ))
  else
    # unset memory if string is empty
    unset $VIASH_META_MEMORY_B
  fi
fi
# unset nproc if string is empty
if [ -z "$VIASH_META_CPUS" ]; then
  unset $VIASH_META_CPUS
fi


# check whether required parameters exist
if [ -z ${VIASH_META_FUNCTIONALITY_NAME+x} ]; then
  ViashError 'functionality_name' is a required argument. Use "--help" to get more information on the parameters.
  exit 1
fi
if [ -z ${VIASH_META_RESOURCES_DIR+x} ]; then
  ViashError 'resources_dir' is a required argument. Use "--help" to get more information on the parameters.
  exit 1
fi
if [ -z ${VIASH_META_EXECUTABLE+x} ]; then
  ViashError 'executable' is a required argument. Use "--help" to get more information on the parameters.
  exit 1
fi
if [ -z ${VIASH_META_CONFIG+x} ]; then
  ViashError 'config' is a required argument. Use "--help" to get more information on the parameters.
  exit 1
fi
if [ -z ${VIASH_META_TEMP_DIR+x} ]; then
  ViashError 'temp_dir' is a required argument. Use "--help" to get more information on the parameters.
  exit 1
fi

# filling in defaults
if [ -z ${VIASH_PAR_TEMP_DIR+x} ]; then
  VIASH_PAR_TEMP_DIR="output/temdir"
fi
if [ -z ${VIASH_PAR_NUM_WORKERS+x} ]; then
  VIASH_PAR_NUM_WORKERS="4"
fi
if [ -z ${VIASH_PAR_NORMRNA+x} ]; then
  VIASH_PAR_NORMRNA="SCT"
fi
if [ -z ${VIASH_PAR_NORMATAC+x} ]; then
  VIASH_PAR_NORMATAC="LSI"
fi
if [ -z ${VIASH_PAR_LSI_FEATURECUTOFF+x} ]; then
  VIASH_PAR_LSI_FEATURECUTOFF="q0"
fi
if [ -z ${VIASH_PAR_NDIMENSIONS_ATAC+x} ]; then
  VIASH_PAR_NDIMENSIONS_ATAC="50"
fi
if [ -z ${VIASH_PAR_INTEGRATIONMETHOD+x} ]; then
  VIASH_PAR_INTEGRATIONMETHOD="WNN"
fi
if [ -z ${VIASH_PAR_WNN_KNN+x} ]; then
  VIASH_PAR_WNN_KNN="20"
fi
if [ -z ${VIASH_PAR_MINCELLSPERCLUSTER+x} ]; then
  VIASH_PAR_MINCELLSPERCLUSTER="25"
fi
if [ -z ${VIASH_PAR_PREPROCESSING_CLUSTERINGMETHOD+x} ]; then
  VIASH_PAR_PREPROCESSING_CLUSTERINGMETHOD="1"
fi
if [ -z ${VIASH_PAR_PREPROCESSING_CLUSTERRESOLUTION+x} ]; then
  VIASH_PAR_PREPROCESSING_CLUSTERRESOLUTION="14.0"
fi
if [ -z ${VIASH_PAR_PREPROCESSING_RNA_NDIMENSIONS+x} ]; then
  VIASH_PAR_PREPROCESSING_RNA_NDIMENSIONS="50"
fi
if [ -z ${VIASH_PAR_GENOMEASSEMBLY+x} ]; then
  VIASH_PAR_GENOMEASSEMBLY="hg38"
fi
if [ -z ${VIASH_PAR_GRANIE_CORMETHOD+x} ]; then
  VIASH_PAR_GRANIE_CORMETHOD="spearman"
fi
if [ -z ${VIASH_PAR_GRANIE_INCLUDESEXCHR+x} ]; then
  VIASH_PAR_GRANIE_INCLUDESEXCHR="true"
fi
if [ -z ${VIASH_PAR_GRANIE_PROMOTERRANGE+x} ]; then
  VIASH_PAR_GRANIE_PROMOTERRANGE="250000"
fi
if [ -z ${VIASH_PAR_GRANIE_TF_PEAK_FDR_THRESHOLD+x} ]; then
  VIASH_PAR_GRANIE_TF_PEAK_FDR_THRESHOLD="0.2"
fi
if [ -z ${VIASH_PAR_GRANIE_PEAK_GENE_FDR_THRESHOLD+x} ]; then
  VIASH_PAR_GRANIE_PEAK_GENE_FDR_THRESHOLD="0.2"
fi
if [ -z ${VIASH_PAR_USEWEIGHTINGLINKS+x} ]; then
  VIASH_PAR_USEWEIGHTINGLINKS="false"
fi
if [ -z ${VIASH_PAR_FORCERERUN+x} ]; then
  VIASH_PAR_FORCERERUN="false"
fi
if [ -z ${VIASH_PAR_SUBSET+x} ]; then
  VIASH_PAR_SUBSET="false"
fi

# check whether required files exist
if [ ! -z "$VIASH_PAR_RNA_R" ] && [ ! -e "$VIASH_PAR_RNA_R" ]; then
  ViashError "Input file '$VIASH_PAR_RNA_R' does not exist."
  exit 1
fi
if [ ! -z "$VIASH_PAR_ATAC_R" ] && [ ! -e "$VIASH_PAR_ATAC_R" ]; then
  ViashError "Input file '$VIASH_PAR_ATAC_R' does not exist."
  exit 1
fi

# check whether parameters values are of the right type
if [[ -n "$VIASH_PAR_NUM_WORKERS" ]]; then
  if ! [[ "$VIASH_PAR_NUM_WORKERS" =~ ^[-+]?[0-9]+$ ]]; then
    ViashError '--num_workers' has to be an integer. Use "--help" to get more information on the parameters.
    exit 1
  fi
fi
if [[ -n "$VIASH_PAR_NDIMENSIONS_ATAC" ]]; then
  if ! [[ "$VIASH_PAR_NDIMENSIONS_ATAC" =~ ^[-+]?[0-9]+$ ]]; then
    ViashError '--nDimensions_ATAC' has to be an integer. Use "--help" to get more information on the parameters.
    exit 1
  fi
fi
if [[ -n "$VIASH_PAR_WNN_KNN" ]]; then
  if ! [[ "$VIASH_PAR_WNN_KNN" =~ ^[-+]?[0-9]+$ ]]; then
    ViashError '--WNN_knn' has to be an integer. Use "--help" to get more information on the parameters.
    exit 1
  fi
fi
if [[ -n "$VIASH_PAR_MINCELLSPERCLUSTER" ]]; then
  if ! [[ "$VIASH_PAR_MINCELLSPERCLUSTER" =~ ^[-+]?[0-9]+$ ]]; then
    ViashError '--minCellsPerCluster' has to be an integer. Use "--help" to get more information on the parameters.
    exit 1
  fi
fi
if [[ -n "$VIASH_PAR_PREPROCESSING_CLUSTERINGMETHOD" ]]; then
  if ! [[ "$VIASH_PAR_PREPROCESSING_CLUSTERINGMETHOD" =~ ^[-+]?[0-9]+$ ]]; then
    ViashError '--preprocessing_clusteringMethod' has to be an integer. Use "--help" to get more information on the parameters.
    exit 1
  fi
fi
if [[ -n "$VIASH_PAR_PREPROCESSING_CLUSTERRESOLUTION" ]]; then
  if ! [[ "$VIASH_PAR_PREPROCESSING_CLUSTERRESOLUTION" =~ ^[-+]?(\.[0-9]+|[0-9]+(\.[0-9]*)?)([eE][-+]?[0-9]+)?$ ]]; then
    ViashError '--preprocessing_clusterResolution' has to be a double. Use "--help" to get more information on the parameters.
    exit 1
  fi
fi
if [[ -n "$VIASH_PAR_PREPROCESSING_RNA_NDIMENSIONS" ]]; then
  if ! [[ "$VIASH_PAR_PREPROCESSING_RNA_NDIMENSIONS" =~ ^[-+]?[0-9]+$ ]]; then
    ViashError '--preprocessing_RNA_nDimensions' has to be an integer. Use "--help" to get more information on the parameters.
    exit 1
  fi
fi
if [[ -n "$VIASH_PAR_GRANIE_INCLUDESEXCHR" ]]; then
  if ! [[ "$VIASH_PAR_GRANIE_INCLUDESEXCHR" =~ ^(true|True|TRUE|false|False|FALSE|yes|Yes|YES|no|No|NO)$ ]]; then
    ViashError '--GRaNIE_includeSexChr' has to be a boolean. Use "--help" to get more information on the parameters.
    exit 1
  fi
fi
if [[ -n "$VIASH_PAR_GRANIE_PROMOTERRANGE" ]]; then
  if ! [[ "$VIASH_PAR_GRANIE_PROMOTERRANGE" =~ ^[-+]?[0-9]+$ ]]; then
    ViashError '--GRaNIE_promoterRange' has to be an integer. Use "--help" to get more information on the parameters.
    exit 1
  fi
fi
if [[ -n "$VIASH_PAR_GRANIE_TF_PEAK_FDR_THRESHOLD" ]]; then
  if ! [[ "$VIASH_PAR_GRANIE_TF_PEAK_FDR_THRESHOLD" =~ ^[-+]?(\.[0-9]+|[0-9]+(\.[0-9]*)?)([eE][-+]?[0-9]+)?$ ]]; then
    ViashError '--GRaNIE_TF_peak_fdr_threshold' has to be a double. Use "--help" to get more information on the parameters.
    exit 1
  fi
fi
if [[ -n "$VIASH_PAR_GRANIE_PEAK_GENE_FDR_THRESHOLD" ]]; then
  if ! [[ "$VIASH_PAR_GRANIE_PEAK_GENE_FDR_THRESHOLD" =~ ^[-+]?(\.[0-9]+|[0-9]+(\.[0-9]*)?)([eE][-+]?[0-9]+)?$ ]]; then
    ViashError '--GRaNIE_peak_gene_fdr_threshold' has to be a double. Use "--help" to get more information on the parameters.
    exit 1
  fi
fi
if [[ -n "$VIASH_PAR_USEWEIGHTINGLINKS" ]]; then
  if ! [[ "$VIASH_PAR_USEWEIGHTINGLINKS" =~ ^(true|True|TRUE|false|False|FALSE|yes|Yes|YES|no|No|NO)$ ]]; then
    ViashError '--useWeightingLinks' has to be a boolean. Use "--help" to get more information on the parameters.
    exit 1
  fi
fi
if [[ -n "$VIASH_PAR_FORCERERUN" ]]; then
  if ! [[ "$VIASH_PAR_FORCERERUN" =~ ^(true|True|TRUE|false|False|FALSE|yes|Yes|YES|no|No|NO)$ ]]; then
    ViashError '--forceRerun' has to be a boolean. Use "--help" to get more information on the parameters.
    exit 1
  fi
fi
if [[ -n "$VIASH_PAR_SUBSET" ]]; then
  if ! [[ "$VIASH_PAR_SUBSET" =~ ^(true|True|TRUE|false|False|FALSE|yes|Yes|YES|no|No|NO)$ ]]; then
    ViashError '--subset' has to be a boolean. Use "--help" to get more information on the parameters.
    exit 1
  fi
fi
if [[ -n "$VIASH_META_CPUS" ]]; then
  if ! [[ "$VIASH_META_CPUS" =~ ^[-+]?[0-9]+$ ]]; then
    ViashError 'cpus' has to be an integer. Use "--help" to get more information on the parameters.
    exit 1
  fi
fi
if [[ -n "$VIASH_META_MEMORY_B" ]]; then
  if ! [[ "$VIASH_META_MEMORY_B" =~ ^[-+]?[0-9]+$ ]]; then
    ViashError 'memory_b' has to be a long. Use "--help" to get more information on the parameters.
    exit 1
  fi
fi
if [[ -n "$VIASH_META_MEMORY_KB" ]]; then
  if ! [[ "$VIASH_META_MEMORY_KB" =~ ^[-+]?[0-9]+$ ]]; then
    ViashError 'memory_kb' has to be a long. Use "--help" to get more information on the parameters.
    exit 1
  fi
fi
if [[ -n "$VIASH_META_MEMORY_MB" ]]; then
  if ! [[ "$VIASH_META_MEMORY_MB" =~ ^[-+]?[0-9]+$ ]]; then
    ViashError 'memory_mb' has to be a long. Use "--help" to get more information on the parameters.
    exit 1
  fi
fi
if [[ -n "$VIASH_META_MEMORY_GB" ]]; then
  if ! [[ "$VIASH_META_MEMORY_GB" =~ ^[-+]?[0-9]+$ ]]; then
    ViashError 'memory_gb' has to be a long. Use "--help" to get more information on the parameters.
    exit 1
  fi
fi
if [[ -n "$VIASH_META_MEMORY_TB" ]]; then
  if ! [[ "$VIASH_META_MEMORY_TB" =~ ^[-+]?[0-9]+$ ]]; then
    ViashError 'memory_tb' has to be a long. Use "--help" to get more information on the parameters.
    exit 1
  fi
fi
if [[ -n "$VIASH_META_MEMORY_PB" ]]; then
  if ! [[ "$VIASH_META_MEMORY_PB" =~ ^[-+]?[0-9]+$ ]]; then
    ViashError 'memory_pb' has to be a long. Use "--help" to get more information on the parameters.
    exit 1
  fi
fi

# create parent directories of output files, if so desired
if [ ! -z "$VIASH_PAR_PREDICTION" ] && [ ! -d "$(dirname "$VIASH_PAR_PREDICTION")" ]; then
  mkdir -p "$(dirname "$VIASH_PAR_PREDICTION")"
fi


# set dependency paths


ViashDebug "Running command: bash"
cat << VIASHEOF | bash
set -e
tempscript=\$(mktemp "$VIASH_META_TEMP_DIR/viash-run-granie-XXXXXX").R
function clean_up {
  rm "\$tempscript"
}
function interrupt {
  echo -e "\nCTRL-C Pressed..."
  exit 1
}
trap clean_up EXIT
trap interrupt INT SIGINT
cat > "\$tempscript" << 'VIASHMAIN'
set.seed(42)
suppressPackageStartupMessages(library(Seurat))

suppressPackageStartupMessages(library(Signac))
suppressPackageStartupMessages(library(Matrix))
library(GRaNIEverse)
library(GRaNIE)
suppressPackageStartupMessages(library(qs))
suppressPackageStartupMessages(library(BSgenome.Hsapiens.UCSC.hg38))
suppressPackageStartupMessages(library(EnsDb.Hsapiens.v86))
suppressPackageStartupMessages(library(EnsDb.Mmusculus.v79))
suppressPackageStartupMessages(library(BSgenome.Mmusculus.UCSC.mm39))
suppressPackageStartupMessages(library(dplyr))
suppressPackageStartupMessages(library(SummarizedExperiment))


## VIASH START
# The following code has been auto-generated by Viash.
# treat warnings as errors
.viash_orig_warn <- options(warn = 2)

par <- list(
  "rna_r" = $( if [ ! -z ${VIASH_PAR_RNA_R+x} ]; then echo -n "'"; echo -n "$VIASH_PAR_RNA_R" | sed "s#['\\]#\\\\&#g"; echo "'"; else echo NULL; fi ),
  "atac_r" = $( if [ ! -z ${VIASH_PAR_ATAC_R+x} ]; then echo -n "'"; echo -n "$VIASH_PAR_ATAC_R" | sed "s#['\\]#\\\\&#g"; echo "'"; else echo NULL; fi ),
  "prediction" = $( if [ ! -z ${VIASH_PAR_PREDICTION+x} ]; then echo -n "'"; echo -n "$VIASH_PAR_PREDICTION" | sed "s#['\\]#\\\\&#g"; echo "'"; else echo NULL; fi ),
  "temp_dir" = $( if [ ! -z ${VIASH_PAR_TEMP_DIR+x} ]; then echo -n "'"; echo -n "$VIASH_PAR_TEMP_DIR" | sed "s#['\\]#\\\\&#g"; echo "'"; else echo NULL; fi ),
  "num_workers" = $( if [ ! -z ${VIASH_PAR_NUM_WORKERS+x} ]; then echo -n "as.integer('"; echo -n "$VIASH_PAR_NUM_WORKERS" | sed "s#['\\]#\\\\&#g"; echo "')"; else echo NULL; fi ),
  "normRNA" = $( if [ ! -z ${VIASH_PAR_NORMRNA+x} ]; then echo -n "'"; echo -n "$VIASH_PAR_NORMRNA" | sed "s#['\\]#\\\\&#g"; echo "'"; else echo NULL; fi ),
  "normATAC" = $( if [ ! -z ${VIASH_PAR_NORMATAC+x} ]; then echo -n "'"; echo -n "$VIASH_PAR_NORMATAC" | sed "s#['\\]#\\\\&#g"; echo "'"; else echo NULL; fi ),
  "LSI_featureCutoff" = $( if [ ! -z ${VIASH_PAR_LSI_FEATURECUTOFF+x} ]; then echo -n "'"; echo -n "$VIASH_PAR_LSI_FEATURECUTOFF" | sed "s#['\\]#\\\\&#g"; echo "'"; else echo NULL; fi ),
  "nDimensions_ATAC" = $( if [ ! -z ${VIASH_PAR_NDIMENSIONS_ATAC+x} ]; then echo -n "as.integer('"; echo -n "$VIASH_PAR_NDIMENSIONS_ATAC" | sed "s#['\\]#\\\\&#g"; echo "')"; else echo NULL; fi ),
  "integrationMethod" = $( if [ ! -z ${VIASH_PAR_INTEGRATIONMETHOD+x} ]; then echo -n "'"; echo -n "$VIASH_PAR_INTEGRATIONMETHOD" | sed "s#['\\]#\\\\&#g"; echo "'"; else echo NULL; fi ),
  "WNN_knn" = $( if [ ! -z ${VIASH_PAR_WNN_KNN+x} ]; then echo -n "as.integer('"; echo -n "$VIASH_PAR_WNN_KNN" | sed "s#['\\]#\\\\&#g"; echo "')"; else echo NULL; fi ),
  "minCellsPerCluster" = $( if [ ! -z ${VIASH_PAR_MINCELLSPERCLUSTER+x} ]; then echo -n "as.integer('"; echo -n "$VIASH_PAR_MINCELLSPERCLUSTER" | sed "s#['\\]#\\\\&#g"; echo "')"; else echo NULL; fi ),
  "preprocessing_clusteringMethod" = $( if [ ! -z ${VIASH_PAR_PREPROCESSING_CLUSTERINGMETHOD+x} ]; then echo -n "as.integer('"; echo -n "$VIASH_PAR_PREPROCESSING_CLUSTERINGMETHOD" | sed "s#['\\]#\\\\&#g"; echo "')"; else echo NULL; fi ),
  "preprocessing_clusterResolution" = $( if [ ! -z ${VIASH_PAR_PREPROCESSING_CLUSTERRESOLUTION+x} ]; then echo -n "as.numeric('"; echo -n "$VIASH_PAR_PREPROCESSING_CLUSTERRESOLUTION" | sed "s#['\\]#\\\\&#g"; echo "')"; else echo NULL; fi ),
  "preprocessing_RNA_nDimensions" = $( if [ ! -z ${VIASH_PAR_PREPROCESSING_RNA_NDIMENSIONS+x} ]; then echo -n "as.integer('"; echo -n "$VIASH_PAR_PREPROCESSING_RNA_NDIMENSIONS" | sed "s#['\\]#\\\\&#g"; echo "')"; else echo NULL; fi ),
  "genomeAssembly" = $( if [ ! -z ${VIASH_PAR_GENOMEASSEMBLY+x} ]; then echo -n "'"; echo -n "$VIASH_PAR_GENOMEASSEMBLY" | sed "s#['\\]#\\\\&#g"; echo "'"; else echo NULL; fi ),
  "GRaNIE_corMethod" = $( if [ ! -z ${VIASH_PAR_GRANIE_CORMETHOD+x} ]; then echo -n "'"; echo -n "$VIASH_PAR_GRANIE_CORMETHOD" | sed "s#['\\]#\\\\&#g"; echo "'"; else echo NULL; fi ),
  "GRaNIE_includeSexChr" = $( if [ ! -z ${VIASH_PAR_GRANIE_INCLUDESEXCHR+x} ]; then echo -n "as.logical(toupper('"; echo -n "$VIASH_PAR_GRANIE_INCLUDESEXCHR" | sed "s#['\\]#\\\\&#g"; echo "'))"; else echo NULL; fi ),
  "GRaNIE_promoterRange" = $( if [ ! -z ${VIASH_PAR_GRANIE_PROMOTERRANGE+x} ]; then echo -n "as.integer('"; echo -n "$VIASH_PAR_GRANIE_PROMOTERRANGE" | sed "s#['\\]#\\\\&#g"; echo "')"; else echo NULL; fi ),
  "GRaNIE_TF_peak_fdr_threshold" = $( if [ ! -z ${VIASH_PAR_GRANIE_TF_PEAK_FDR_THRESHOLD+x} ]; then echo -n "as.numeric('"; echo -n "$VIASH_PAR_GRANIE_TF_PEAK_FDR_THRESHOLD" | sed "s#['\\]#\\\\&#g"; echo "')"; else echo NULL; fi ),
  "GRaNIE_peak_gene_fdr_threshold" = $( if [ ! -z ${VIASH_PAR_GRANIE_PEAK_GENE_FDR_THRESHOLD+x} ]; then echo -n "as.numeric('"; echo -n "$VIASH_PAR_GRANIE_PEAK_GENE_FDR_THRESHOLD" | sed "s#['\\]#\\\\&#g"; echo "')"; else echo NULL; fi ),
  "useWeightingLinks" = $( if [ ! -z ${VIASH_PAR_USEWEIGHTINGLINKS+x} ]; then echo -n "as.logical(toupper('"; echo -n "$VIASH_PAR_USEWEIGHTINGLINKS" | sed "s#['\\]#\\\\&#g"; echo "'))"; else echo NULL; fi ),
  "forceRerun" = $( if [ ! -z ${VIASH_PAR_FORCERERUN+x} ]; then echo -n "as.logical(toupper('"; echo -n "$VIASH_PAR_FORCERERUN" | sed "s#['\\]#\\\\&#g"; echo "'))"; else echo NULL; fi ),
  "subset" = $( if [ ! -z ${VIASH_PAR_SUBSET+x} ]; then echo -n "as.logical(toupper('"; echo -n "$VIASH_PAR_SUBSET" | sed "s#['\\]#\\\\&#g"; echo "'))"; else echo NULL; fi )
)
meta <- list(
  "functionality_name" = $( if [ ! -z ${VIASH_META_FUNCTIONALITY_NAME+x} ]; then echo -n "'"; echo -n "$VIASH_META_FUNCTIONALITY_NAME" | sed "s#['\\]#\\\\&#g"; echo "'"; else echo NULL; fi ),
  "resources_dir" = $( if [ ! -z ${VIASH_META_RESOURCES_DIR+x} ]; then echo -n "'"; echo -n "$VIASH_META_RESOURCES_DIR" | sed "s#['\\]#\\\\&#g"; echo "'"; else echo NULL; fi ),
  "executable" = $( if [ ! -z ${VIASH_META_EXECUTABLE+x} ]; then echo -n "'"; echo -n "$VIASH_META_EXECUTABLE" | sed "s#['\\]#\\\\&#g"; echo "'"; else echo NULL; fi ),
  "config" = $( if [ ! -z ${VIASH_META_CONFIG+x} ]; then echo -n "'"; echo -n "$VIASH_META_CONFIG" | sed "s#['\\]#\\\\&#g"; echo "'"; else echo NULL; fi ),
  "temp_dir" = $( if [ ! -z ${VIASH_META_TEMP_DIR+x} ]; then echo -n "'"; echo -n "$VIASH_META_TEMP_DIR" | sed "s#['\\]#\\\\&#g"; echo "'"; else echo NULL; fi ),
  "cpus" = $( if [ ! -z ${VIASH_META_CPUS+x} ]; then echo -n "as.integer('"; echo -n "$VIASH_META_CPUS" | sed "s#['\\]#\\\\&#g"; echo "')"; else echo NULL; fi ),
  "memory_b" = $( if [ ! -z ${VIASH_META_MEMORY_B+x} ]; then echo -n "bit64::as.integer64('"; echo -n "$VIASH_META_MEMORY_B" | sed "s#['\\]#\\\\&#g"; echo "')"; else echo NULL; fi ),
  "memory_kb" = $( if [ ! -z ${VIASH_META_MEMORY_KB+x} ]; then echo -n "bit64::as.integer64('"; echo -n "$VIASH_META_MEMORY_KB" | sed "s#['\\]#\\\\&#g"; echo "')"; else echo NULL; fi ),
  "memory_mb" = $( if [ ! -z ${VIASH_META_MEMORY_MB+x} ]; then echo -n "bit64::as.integer64('"; echo -n "$VIASH_META_MEMORY_MB" | sed "s#['\\]#\\\\&#g"; echo "')"; else echo NULL; fi ),
  "memory_gb" = $( if [ ! -z ${VIASH_META_MEMORY_GB+x} ]; then echo -n "bit64::as.integer64('"; echo -n "$VIASH_META_MEMORY_GB" | sed "s#['\\]#\\\\&#g"; echo "')"; else echo NULL; fi ),
  "memory_tb" = $( if [ ! -z ${VIASH_META_MEMORY_TB+x} ]; then echo -n "bit64::as.integer64('"; echo -n "$VIASH_META_MEMORY_TB" | sed "s#['\\]#\\\\&#g"; echo "')"; else echo NULL; fi ),
  "memory_pb" = $( if [ ! -z ${VIASH_META_MEMORY_PB+x} ]; then echo -n "bit64::as.integer64('"; echo -n "$VIASH_META_MEMORY_PB" | sed "s#['\\]#\\\\&#g"; echo "')"; else echo NULL; fi )
)
dep <- list(
  
)


# restore original warn setting
options(.viash_orig_warn)
rm(.viash_orig_warn)

## VIASH END


cat("Content of par list:")
str(par)

#### STANDARD ASSIGNMENTS ###
file_seurat = "seurat_granie.qs"
outputDir = dirname(par\$prediction)

if (!dir.exists(outputDir)) {
  dir.create(outputDir, recursive = TRUE)
}


#########################
# Downloading resources #
#########################
file_hocomoco_v12 = "https://s3.embl.de/zaugg-web/GRaNIE/TFBS/hg38/PWMScan_HOCOMOCOv12_H12INVIVO.tar.gz"

destfile <- "PWMScan_HOCOMOCOv12_H12INVIVO.tar.gz"

if (!file.exists(destfile)) {
  
  options(timeout = 1200)
  download.file(file_hocomoco_v12, destfile)
}

# Define the directory to extract the files to
exdir <- "PWMScan_HOCOMOCOv12_H12INVIVO"

GRaNIE_TFBSFolder = paste0(exdir, "/H12INVIVO")

if (!file.exists(GRaNIE_TFBSFolder)) {
  untar(destfile, exdir = exdir)
}

if (par\$genomeAssembly == "hg38"){
  file_RNA_URL = "https://s3.embl.de/zaugg-web/GRaNIEverse/features_RNA_hg38.tsv.gz"

} else if (par\$genomeAssembly == "mm10") {
  file_RNA_URL = "https://s3.embl.de/zaugg-web/GRaNIEverse/features_RNA_mm10.tsv.gz"
}

file_RNA <- paste0("features_RNA_", par\$genomeAssembly, ".tsv.gz")
if (!file.exists(file_RNA)) {
  options(timeout = 1200)
  download.file(file_RNA_URL, file_RNA)
}


###################
# Preprocess data #
###################

if (par\$forceRerun | !file.exists(file_seurat)) {
  
 # Sparse matrix
 rna.m = readRDS(par\$multiomics_rna_r)
 
 seurat_object <- CreateSeuratObject(count = rna.m, project = "PBMC", min.cells = 1, min.features = 1, assay = "RNA")
 
 # RangedSummarizedExperiment
 atac = readRDS(par\$multiomics_atac_r)
 
 # Extract counts and metadata from the RangedSummarizedExperiment
  atac_counts <- assays(atac)\$counts
  
  rownames(atac_counts) =  paste0(seqnames(rowRanges(atac)) %>% as.character(), ":", start(rowRanges(atac)), "-", end(rowRanges(atac)))
  
  # Create a ChromatinAssay
  chrom_assay <- CreateChromatinAssay(
   counts = atac_counts,
   sep = c(":", "-"),
   genome = 'hg38',
   fragments = NULL,
   min.cells = 1,
   min.features = 1,
   colData = DataFrame(colData(atac))
  )
 
  if (par\$genomeAssembly == "hg38"){
    annotations <- GetGRangesFromEnsDb(ensdb = EnsDb.Hsapiens.v86)
    
  } else if (par\$genomeAssembly == "mm10") {
    annotations <- GetGRangesFromEnsDb(ensdb = EnsDb.Mmusculus.v79)
  }
  
  seqlevelsStyle(annotations) <- "UCSC"
  genome(annotations) <- par\$genomeAssembly
  Annotation(chrom_assay) <- annotations
 
  # Unify cells
  # Identify the common cells between the RNA and ATAC assays
  common_cells <- intersect(colnames(seurat_object[["RNA"]]), colnames(chrom_assay))
  
  # Subset the Seurat object to include only the common cells
  chrom_assay <- subset(chrom_assay, cells = common_cells)

  seurat_object[["peaks"]] = chrom_assay
    
  qs::qsave(seurat_object, "seurat_granie.qs")
    
} else {

  seurat_object = qs::qread(file_seurat)
  
}

output_seuratProcessed = paste0(outputDir, "/seuratObject.qs")

###################
# Preprocess data #
###################

# Take output from preprocessing steps
GRaNIE_file_peaks = paste0(outputDir, "/atac.pseudobulkFromClusters_res", par\$preprocessing_clusterResolution, "_mean.tsv.gz")
GRaNIE_file_rna = paste0(outputDir, "/rna.pseudobulkFromClusters_res", par\$preprocessing_clusterResolution, "_mean.tsv.gz")
GRaNIE_file_metadata = paste0(outputDir, "/metadata_res", par\$preprocessing_clusterResolution, "_mean.tsv.gz")

if (file.exists(GRaNIE_file_peaks) & file.exists(GRaNIE_file_metadata) & file.exists(GRaNIE_file_rna) & !par\$forceRerun) {
  
  cat("Preprocessing skipped because all files already exist anf forceRerun = FALSE.")
  
} else {

    # Subset for testing purposes
    if (par\$subset == TRUE) {
        cat("SUBSET cells\\n")
        random_cells <- sample(Cells(seurat_object), size = 5000, replace = FALSE)
        seurat_object = subset(seurat_object, cells = random_cells)
        cat("SUBSET peaks\\n")
        peak_names <- rownames(seurat_object[["peaks"]])
        selected_peaks <- sample(peak_names, size = 50000, replace = FALSE)
        seurat_object[["peaks"]] = subset(seurat_object[["peaks"]], features = selected_peaks)
    }

  seurat_object = prepareSeuratData_GRaNIE(seurat_object, 
                                           outputDir = outputDir,
                                           saveSeuratObject = TRUE,
                                           genome = par\$genomeAssembly,
                                           assayName_RNA = "RNA", normRNA = "SCT", nDimensions_RNA = par\$preprocessing_RNA_nDimensions, recalculateVariableFeatures = NULL,
                                           assayName_ATAC_raw = "peaks", 
                                           normATAC = "LSI", LSI_featureCutoff = "q0", nDimensions_ATAC = 50, dimensionsToIgnore_LSI_ATAC = 1,
                                           integrationMethod = "WNN", WNN_knn = 20,
                                           pseudobulk_source = "cluster",
                                           countAggregation = "mean",
                                           clusteringAlgorithm = par\$preprocessing_clusteringMethod, 
                                           clusterResolutions = par\$preprocessing_clusterResolution,
                                           minCellsPerCluster = 25,
                                           forceRerun = FALSE
      )
  
}



##############
# Run GRaNIE #
##############

GRN = runGRaNIE(
  dir_output = outputDir,
  datasetName = "undescribed",
  GRaNIE_file_peaks,
  GRaNIE_file_rna,
  GRaNIE_file_metadata,
  TFBS_source = "custom",
  TFBS_folder = GRaNIE_TFBSFolder,
  genomeAssembly = par\$genomeAssembly,
  normalization_peaks = "none",
  idColumn_peaks = "peakID",
  normalization_rna = "none",
  idColumn_RNA = "ENSEMBL",
  includeSexChr = par\$GRaNIE_includeSexChr,
  minCV = 0,
  minNormalizedMean_peaks = NULL,
  minNormalizedMean_RNA = NULL,
  minSizePeaks = 5,
  corMethod = par\$GRaNIE_corMethod,
  promoterRange = par\$GRaNIE_promoterRange,
  useGCCorrection = FALSE,
  TF_peak.fdr.threshold = par\$GRaNIE_TF_peak_fdr_threshold,
  peak_gene.fdr.threshold = par\$GRaNIE_peak_gene_fdr_threshold,
  runTFClassification = FALSE,
  runNetworkAnalyses = FALSE,
  nCores = par\$num_workers,
  forceRerun = TRUE
)

# Post-process GRN
connections.df = getGRNConnections(GRN, 
                                   include_TF_gene_correlations = TRUE, 
                                   include_peakMetadata = TRUE, 
                                   include_TFMetadata = TRUE, 
                                   include_geneMetadata = TRUE)

final.df = connections.df %>%
  dplyr::select(TF.name, gene.name, TF_gene.r) %>%
  dplyr::rename(source = TF.name, target = gene.name)

if (par\$useWeightingLinks) {
  final.df = dplyr::mutate(final.df, weight = abs(.data\$TF_gene.r))
} else {
  final.df = dplyr::mutate(final.df, weight = 1)
}

final.df %>%
  dplyr::select(source, target, weight) %>%
  readr::write_csv(par\$prediction)
VIASHMAIN
Rscript "\$tempscript" &
wait "\$!"

VIASHEOF


# check whether required files exist
if [ ! -z "$VIASH_PAR_PREDICTION" ] && [ ! -e "$VIASH_PAR_PREDICTION" ]; then
  ViashError "Output file '$VIASH_PAR_PREDICTION' does not exist."
  exit 1
fi


exit 0
