#!/usr/bin/env bash

# batch_correction_scgen build-main
# 
# This wrapper script is auto-generated by viash 0.8.6 and is thus a derivative
# work thereof. This software comes with ABSOLUTELY NO WARRANTY from Data
# Intuitive.
# 
# The component may contain files which fall under a different license. The
# authors of this component should specify the license in the header of such
# files, or include a separate license file detailing the licenses of all included
# files.

set -e

if [ -z "$VIASH_TEMP" ]; then
  VIASH_TEMP=${VIASH_TEMP:-$VIASH_TMPDIR}
  VIASH_TEMP=${VIASH_TEMP:-$VIASH_TEMPDIR}
  VIASH_TEMP=${VIASH_TEMP:-$VIASH_TMP}
  VIASH_TEMP=${VIASH_TEMP:-$TMPDIR}
  VIASH_TEMP=${VIASH_TEMP:-$TMP}
  VIASH_TEMP=${VIASH_TEMP:-$TEMPDIR}
  VIASH_TEMP=${VIASH_TEMP:-$TEMP}
  VIASH_TEMP=${VIASH_TEMP:-/tmp}
fi

# define helper functions
# ViashQuote: put quotes around non flag values
# $1     : unquoted string
# return : possibly quoted string
# examples:
#   ViashQuote --foo      # returns --foo
#   ViashQuote bar        # returns 'bar'
#   Viashquote --foo=bar  # returns --foo='bar'
function ViashQuote {
  if [[ "$1" =~ ^-+[a-zA-Z0-9_\-]+=.+$ ]]; then
    echo "$1" | sed "s#=\(.*\)#='\1'#"
  elif [[ "$1" =~ ^-+[a-zA-Z0-9_\-]+$ ]]; then
    echo "$1"
  else
    echo "'$1'"
  fi
}
# ViashRemoveFlags: Remove leading flag
# $1     : string with a possible leading flag
# return : string without possible leading flag
# examples:
#   ViashRemoveFlags --foo=bar  # returns bar
function ViashRemoveFlags {
  echo "$1" | sed 's/^--*[a-zA-Z0-9_\-]*=//'
}
# ViashSourceDir: return the path of a bash file, following symlinks
# usage   : ViashSourceDir ${BASH_SOURCE[0]}
# $1      : Should always be set to ${BASH_SOURCE[0]}
# returns : The absolute path of the bash file
function ViashSourceDir {
  SOURCE="$1"
  while [ -h "$SOURCE" ]; do
    DIR="$( cd -P "$( dirname "$SOURCE" )" >/dev/null 2>&1 && pwd )"
    SOURCE="$(readlink "$SOURCE")"
    [[ $SOURCE != /* ]] && SOURCE="$DIR/$SOURCE"
  done
  cd -P "$( dirname "$SOURCE" )" >/dev/null 2>&1 && pwd
}
# ViashFindTargetDir: return the path of the '.build.yaml' file, following symlinks
# usage   : ViashFindTargetDir 'ScriptPath'
# $1      : The location from where to start the upward search
# returns : The absolute path of the '.build.yaml' file
function ViashFindTargetDir {
  SOURCE="$1"
  while [[ "$SOURCE" != "" && ! -e "$SOURCE/.build.yaml" ]]; do
    SOURCE=${SOURCE%/*}
  done
  echo $SOURCE
}
# see https://en.wikipedia.org/wiki/Syslog#Severity_level
VIASH_LOGCODE_EMERGENCY=0
VIASH_LOGCODE_ALERT=1
VIASH_LOGCODE_CRITICAL=2
VIASH_LOGCODE_ERROR=3
VIASH_LOGCODE_WARNING=4
VIASH_LOGCODE_NOTICE=5
VIASH_LOGCODE_INFO=6
VIASH_LOGCODE_DEBUG=7
VIASH_VERBOSITY=$VIASH_LOGCODE_NOTICE

# ViashLog: Log events depending on the verbosity level
# usage: ViashLog 1 alert Oh no something went wrong!
# $1: required verbosity level
# $2: display tag
# $3+: messages to display
# stdout: Your input, prepended by '[$2] '.
function ViashLog {
  local required_level="$1"
  local display_tag="$2"
  shift 2
  if [ $VIASH_VERBOSITY -ge $required_level ]; then
    >&2 echo "[$display_tag]" "$@"
  fi
}

# ViashEmergency: log events when the system is unstable
# usage: ViashEmergency Oh no something went wrong.
# stdout: Your input, prepended by '[emergency] '.
function ViashEmergency {
  ViashLog $VIASH_LOGCODE_EMERGENCY emergency "$@"
}

# ViashAlert: log events when actions must be taken immediately (e.g. corrupted system database)
# usage: ViashAlert Oh no something went wrong.
# stdout: Your input, prepended by '[alert] '.
function ViashAlert {
  ViashLog $VIASH_LOGCODE_ALERT alert "$@"
}

# ViashCritical: log events when a critical condition occurs
# usage: ViashCritical Oh no something went wrong.
# stdout: Your input, prepended by '[critical] '.
function ViashCritical {
  ViashLog $VIASH_LOGCODE_CRITICAL critical "$@"
}

# ViashError: log events when an error condition occurs
# usage: ViashError Oh no something went wrong.
# stdout: Your input, prepended by '[error] '.
function ViashError {
  ViashLog $VIASH_LOGCODE_ERROR error "$@"
}

# ViashWarning: log potentially abnormal events
# usage: ViashWarning Something may have gone wrong.
# stdout: Your input, prepended by '[warning] '.
function ViashWarning {
  ViashLog $VIASH_LOGCODE_WARNING warning "$@"
}

# ViashNotice: log significant but normal events
# usage: ViashNotice This just happened.
# stdout: Your input, prepended by '[notice] '.
function ViashNotice {
  ViashLog $VIASH_LOGCODE_NOTICE notice "$@"
}

# ViashInfo: log normal events
# usage: ViashInfo This just happened.
# stdout: Your input, prepended by '[info] '.
function ViashInfo {
  ViashLog $VIASH_LOGCODE_INFO info "$@"
}

# ViashDebug: log all events, for debugging purposes
# usage: ViashDebug This just happened.
# stdout: Your input, prepended by '[debug] '.
function ViashDebug {
  ViashLog $VIASH_LOGCODE_DEBUG debug "$@"
}

# find source folder of this component
VIASH_META_RESOURCES_DIR=`ViashSourceDir ${BASH_SOURCE[0]}`

# find the root of the built components & dependencies
VIASH_TARGET_DIR=`ViashFindTargetDir $VIASH_META_RESOURCES_DIR`

# define meta fields
VIASH_META_FUNCTIONALITY_NAME="batch_correction_scgen"
VIASH_META_EXECUTABLE="$VIASH_META_RESOURCES_DIR/$VIASH_META_FUNCTIONALITY_NAME"
VIASH_META_CONFIG="$VIASH_META_RESOURCES_DIR/.config.vsh.yaml"
VIASH_META_TEMP_DIR="$VIASH_TEMP"


# ViashHelp: Display helpful explanation about this executable
function ViashHelp {
  echo "batch_correction_scgen build-main"
  echo ""
  echo "Arguments:"
  echo "    --perturbation_data_n"
  echo "        type: file, required parameter, file must exist"
  echo "        example: resources_test/evaluation_datasets/op_perturbation.h5ad"
  echo ""
  echo "    --perturbation_data_bc"
  echo "        type: file, output, file must exist"
  echo ""
  echo "    --batch_key"
  echo "        type: string"
  echo "        default: plate_id"
  echo ""
  echo "    --label_key"
  echo "        type: string"
  echo "        default: cell_type"
}

# initialise array
VIASH_POSITIONAL_ARGS=''
VIASH_MODE='run'

while [[ $# -gt 0 ]]; do
    case "$1" in
        -h|--help)
            ViashHelp
            exit
            ;;
        ---v|---verbose)
            let "VIASH_VERBOSITY=VIASH_VERBOSITY+1"
            shift 1
            ;;
        ---verbosity)
            VIASH_VERBOSITY="$2"
            shift 2
            ;;
        ---verbosity=*)
            VIASH_VERBOSITY="$(ViashRemoveFlags "$1")"
            shift 1
            ;;
        --version)
            echo "batch_correction_scgen build-main"
            exit
            ;;
        --perturbation_data_n)
            [ -n "$VIASH_PAR_PERTURBATION_DATA_N" ] && ViashError Bad arguments for option \'--perturbation_data_n\': \'$VIASH_PAR_PERTURBATION_DATA_N\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_PERTURBATION_DATA_N="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to --perturbation_data_n. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        --perturbation_data_n=*)
            [ -n "$VIASH_PAR_PERTURBATION_DATA_N" ] && ViashError Bad arguments for option \'--perturbation_data_n=*\': \'$VIASH_PAR_PERTURBATION_DATA_N\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_PERTURBATION_DATA_N=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --perturbation_data_bc)
            [ -n "$VIASH_PAR_PERTURBATION_DATA_BC" ] && ViashError Bad arguments for option \'--perturbation_data_bc\': \'$VIASH_PAR_PERTURBATION_DATA_BC\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_PERTURBATION_DATA_BC="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to --perturbation_data_bc. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        --perturbation_data_bc=*)
            [ -n "$VIASH_PAR_PERTURBATION_DATA_BC" ] && ViashError Bad arguments for option \'--perturbation_data_bc=*\': \'$VIASH_PAR_PERTURBATION_DATA_BC\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_PERTURBATION_DATA_BC=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --batch_key)
            [ -n "$VIASH_PAR_BATCH_KEY" ] && ViashError Bad arguments for option \'--batch_key\': \'$VIASH_PAR_BATCH_KEY\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_BATCH_KEY="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to --batch_key. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        --batch_key=*)
            [ -n "$VIASH_PAR_BATCH_KEY" ] && ViashError Bad arguments for option \'--batch_key=*\': \'$VIASH_PAR_BATCH_KEY\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_BATCH_KEY=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --label_key)
            [ -n "$VIASH_PAR_LABEL_KEY" ] && ViashError Bad arguments for option \'--label_key\': \'$VIASH_PAR_LABEL_KEY\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_LABEL_KEY="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to --label_key. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        --label_key=*)
            [ -n "$VIASH_PAR_LABEL_KEY" ] && ViashError Bad arguments for option \'--label_key=*\': \'$VIASH_PAR_LABEL_KEY\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_PAR_LABEL_KEY=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        ---cpus)
            [ -n "$VIASH_META_CPUS" ] && ViashError Bad arguments for option \'---cpus\': \'$VIASH_META_CPUS\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_META_CPUS="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to ---cpus. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        ---cpus=*)
            [ -n "$VIASH_META_CPUS" ] && ViashError Bad arguments for option \'---cpus=*\': \'$VIASH_META_CPUS\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_META_CPUS=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        ---memory)
            [ -n "$VIASH_META_MEMORY" ] && ViashError Bad arguments for option \'---memory\': \'$VIASH_META_MEMORY\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_META_MEMORY="$2"
            [ $# -lt 2 ] && ViashError Not enough arguments passed to ---memory. Use "--help" to get more information on the parameters. && exit 1
            shift 2
            ;;
        ---memory=*)
            [ -n "$VIASH_META_MEMORY" ] && ViashError Bad arguments for option \'---memory=*\': \'$VIASH_META_MEMORY\' \& \'$2\' - you should provide exactly one argument for this option. && exit 1
            VIASH_META_MEMORY=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        *)  # positional arg or unknown option
            # since the positional args will be eval'd, can we always quote, instead of using ViashQuote
            VIASH_POSITIONAL_ARGS="$VIASH_POSITIONAL_ARGS '$1'"
            [[ $1 == -* ]] && ViashWarning $1 looks like a parameter but is not a defined parameter and will instead be treated as a positional argument. Use "--help" to get more information on the parameters.
            shift # past argument
            ;;
    esac
done

# parse positional parameters
eval set -- $VIASH_POSITIONAL_ARGS


# setting computational defaults

# helper function for parsing memory strings
function ViashMemoryAsBytes {
  local memory=`echo "$1" | tr '[:upper:]' '[:lower:]' | tr -d '[:space:]'`
  local memory_regex='^([0-9]+)([kmgtp]b?|b)$'
  if [[ $memory =~ $memory_regex ]]; then
    local number=${memory/[^0-9]*/}
    local symbol=${memory/*[0-9]/}
    
    case $symbol in
      b)      memory_b=$number ;;
      kb|k)   memory_b=$(( $number * 1024 )) ;;
      mb|m)   memory_b=$(( $number * 1024 * 1024 )) ;;
      gb|g)   memory_b=$(( $number * 1024 * 1024 * 1024 )) ;;
      tb|t)   memory_b=$(( $number * 1024 * 1024 * 1024 * 1024 )) ;;
      pb|p)   memory_b=$(( $number * 1024 * 1024 * 1024 * 1024 * 1024 )) ;;
    esac
    echo "$memory_b"
  fi
}
# compute memory in different units
if [ ! -z ${VIASH_META_MEMORY+x} ]; then
  VIASH_META_MEMORY_B=`ViashMemoryAsBytes $VIASH_META_MEMORY`
  # do not define other variables if memory_b is an empty string
  if [ ! -z "$VIASH_META_MEMORY_B" ]; then
    VIASH_META_MEMORY_KB=$(( ($VIASH_META_MEMORY_B+1023) / 1024 ))
    VIASH_META_MEMORY_MB=$(( ($VIASH_META_MEMORY_KB+1023) / 1024 ))
    VIASH_META_MEMORY_GB=$(( ($VIASH_META_MEMORY_MB+1023) / 1024 ))
    VIASH_META_MEMORY_TB=$(( ($VIASH_META_MEMORY_GB+1023) / 1024 ))
    VIASH_META_MEMORY_PB=$(( ($VIASH_META_MEMORY_TB+1023) / 1024 ))
  else
    # unset memory if string is empty
    unset $VIASH_META_MEMORY_B
  fi
fi
# unset nproc if string is empty
if [ -z "$VIASH_META_CPUS" ]; then
  unset $VIASH_META_CPUS
fi


# check whether required parameters exist
if [ -z ${VIASH_PAR_PERTURBATION_DATA_N+x} ]; then
  ViashError '--perturbation_data_n' is a required argument. Use "--help" to get more information on the parameters.
  exit 1
fi
if [ -z ${VIASH_META_FUNCTIONALITY_NAME+x} ]; then
  ViashError 'functionality_name' is a required argument. Use "--help" to get more information on the parameters.
  exit 1
fi
if [ -z ${VIASH_META_RESOURCES_DIR+x} ]; then
  ViashError 'resources_dir' is a required argument. Use "--help" to get more information on the parameters.
  exit 1
fi
if [ -z ${VIASH_META_EXECUTABLE+x} ]; then
  ViashError 'executable' is a required argument. Use "--help" to get more information on the parameters.
  exit 1
fi
if [ -z ${VIASH_META_CONFIG+x} ]; then
  ViashError 'config' is a required argument. Use "--help" to get more information on the parameters.
  exit 1
fi
if [ -z ${VIASH_META_TEMP_DIR+x} ]; then
  ViashError 'temp_dir' is a required argument. Use "--help" to get more information on the parameters.
  exit 1
fi

# filling in defaults
if [ -z ${VIASH_PAR_BATCH_KEY+x} ]; then
  VIASH_PAR_BATCH_KEY="plate_id"
fi
if [ -z ${VIASH_PAR_LABEL_KEY+x} ]; then
  VIASH_PAR_LABEL_KEY="cell_type"
fi

# check whether required files exist
if [ ! -z "$VIASH_PAR_PERTURBATION_DATA_N" ] && [ ! -e "$VIASH_PAR_PERTURBATION_DATA_N" ]; then
  ViashError "Input file '$VIASH_PAR_PERTURBATION_DATA_N' does not exist."
  exit 1
fi

# check whether parameters values are of the right type
if [[ -n "$VIASH_META_CPUS" ]]; then
  if ! [[ "$VIASH_META_CPUS" =~ ^[-+]?[0-9]+$ ]]; then
    ViashError 'cpus' has to be an integer. Use "--help" to get more information on the parameters.
    exit 1
  fi
fi
if [[ -n "$VIASH_META_MEMORY_B" ]]; then
  if ! [[ "$VIASH_META_MEMORY_B" =~ ^[-+]?[0-9]+$ ]]; then
    ViashError 'memory_b' has to be a long. Use "--help" to get more information on the parameters.
    exit 1
  fi
fi
if [[ -n "$VIASH_META_MEMORY_KB" ]]; then
  if ! [[ "$VIASH_META_MEMORY_KB" =~ ^[-+]?[0-9]+$ ]]; then
    ViashError 'memory_kb' has to be a long. Use "--help" to get more information on the parameters.
    exit 1
  fi
fi
if [[ -n "$VIASH_META_MEMORY_MB" ]]; then
  if ! [[ "$VIASH_META_MEMORY_MB" =~ ^[-+]?[0-9]+$ ]]; then
    ViashError 'memory_mb' has to be a long. Use "--help" to get more information on the parameters.
    exit 1
  fi
fi
if [[ -n "$VIASH_META_MEMORY_GB" ]]; then
  if ! [[ "$VIASH_META_MEMORY_GB" =~ ^[-+]?[0-9]+$ ]]; then
    ViashError 'memory_gb' has to be a long. Use "--help" to get more information on the parameters.
    exit 1
  fi
fi
if [[ -n "$VIASH_META_MEMORY_TB" ]]; then
  if ! [[ "$VIASH_META_MEMORY_TB" =~ ^[-+]?[0-9]+$ ]]; then
    ViashError 'memory_tb' has to be a long. Use "--help" to get more information on the parameters.
    exit 1
  fi
fi
if [[ -n "$VIASH_META_MEMORY_PB" ]]; then
  if ! [[ "$VIASH_META_MEMORY_PB" =~ ^[-+]?[0-9]+$ ]]; then
    ViashError 'memory_pb' has to be a long. Use "--help" to get more information on the parameters.
    exit 1
  fi
fi

# create parent directories of output files, if so desired
if [ ! -z "$VIASH_PAR_PERTURBATION_DATA_BC" ] && [ ! -d "$(dirname "$VIASH_PAR_PERTURBATION_DATA_BC")" ]; then
  mkdir -p "$(dirname "$VIASH_PAR_PERTURBATION_DATA_BC")"
fi


# set dependency paths


ViashDebug "Running command: bash"
cat << VIASHEOF | bash
set -e
tempscript=\$(mktemp "$VIASH_META_TEMP_DIR/viash-run-batch_correction_scgen-XXXXXX").py
function clean_up {
  rm "\$tempscript"
}
function interrupt {
  echo -e "\nCTRL-C Pressed..."
  exit 1
}
trap clean_up EXIT
trap interrupt INT SIGINT
cat > "\$tempscript" << 'VIASHMAIN'
import anndata as ad 
import pandas as pd
import numpy as np
import scanpy as sc
import scgen

## VIASH START
# The following code has been auto-generated by Viash.
par = {
  'perturbation_data_n': $( if [ ! -z ${VIASH_PAR_PERTURBATION_DATA_N+x} ]; then echo "r'${VIASH_PAR_PERTURBATION_DATA_N//\'/\'\"\'\"r\'}'"; else echo None; fi ),
  'perturbation_data_bc': $( if [ ! -z ${VIASH_PAR_PERTURBATION_DATA_BC+x} ]; then echo "r'${VIASH_PAR_PERTURBATION_DATA_BC//\'/\'\"\'\"r\'}'"; else echo None; fi ),
  'batch_key': $( if [ ! -z ${VIASH_PAR_BATCH_KEY+x} ]; then echo "r'${VIASH_PAR_BATCH_KEY//\'/\'\"\'\"r\'}'"; else echo None; fi ),
  'label_key': $( if [ ! -z ${VIASH_PAR_LABEL_KEY+x} ]; then echo "r'${VIASH_PAR_LABEL_KEY//\'/\'\"\'\"r\'}'"; else echo None; fi )
}
meta = {
  'functionality_name': $( if [ ! -z ${VIASH_META_FUNCTIONALITY_NAME+x} ]; then echo "r'${VIASH_META_FUNCTIONALITY_NAME//\'/\'\"\'\"r\'}'"; else echo None; fi ),
  'resources_dir': $( if [ ! -z ${VIASH_META_RESOURCES_DIR+x} ]; then echo "r'${VIASH_META_RESOURCES_DIR//\'/\'\"\'\"r\'}'"; else echo None; fi ),
  'executable': $( if [ ! -z ${VIASH_META_EXECUTABLE+x} ]; then echo "r'${VIASH_META_EXECUTABLE//\'/\'\"\'\"r\'}'"; else echo None; fi ),
  'config': $( if [ ! -z ${VIASH_META_CONFIG+x} ]; then echo "r'${VIASH_META_CONFIG//\'/\'\"\'\"r\'}'"; else echo None; fi ),
  'temp_dir': $( if [ ! -z ${VIASH_META_TEMP_DIR+x} ]; then echo "r'${VIASH_META_TEMP_DIR//\'/\'\"\'\"r\'}'"; else echo None; fi ),
  'cpus': $( if [ ! -z ${VIASH_META_CPUS+x} ]; then echo "int(r'${VIASH_META_CPUS//\'/\'\"\'\"r\'}')"; else echo None; fi ),
  'memory_b': $( if [ ! -z ${VIASH_META_MEMORY_B+x} ]; then echo "int(r'${VIASH_META_MEMORY_B//\'/\'\"\'\"r\'}')"; else echo None; fi ),
  'memory_kb': $( if [ ! -z ${VIASH_META_MEMORY_KB+x} ]; then echo "int(r'${VIASH_META_MEMORY_KB//\'/\'\"\'\"r\'}')"; else echo None; fi ),
  'memory_mb': $( if [ ! -z ${VIASH_META_MEMORY_MB+x} ]; then echo "int(r'${VIASH_META_MEMORY_MB//\'/\'\"\'\"r\'}')"; else echo None; fi ),
  'memory_gb': $( if [ ! -z ${VIASH_META_MEMORY_GB+x} ]; then echo "int(r'${VIASH_META_MEMORY_GB//\'/\'\"\'\"r\'}')"; else echo None; fi ),
  'memory_tb': $( if [ ! -z ${VIASH_META_MEMORY_TB+x} ]; then echo "int(r'${VIASH_META_MEMORY_TB//\'/\'\"\'\"r\'}')"; else echo None; fi ),
  'memory_pb': $( if [ ! -z ${VIASH_META_MEMORY_PB+x} ]; then echo "int(r'${VIASH_META_MEMORY_PB//\'/\'\"\'\"r\'}')"; else echo None; fi )
}
dep = {
  
}

## VIASH END
import argparse
parser = argparse.ArgumentParser(description="Batch correction")
parser.add_argument('--perturbation_data_n', type=str, help='Path to the anndata file')
parser.add_argument('--perturbation_data_bc', type=str, help='Path to the anndata file')
parser.add_argument('--batch_key', type=str, help='Batch name')
parser.add_argument('--label_key', type=str, help='label name')

args = parser.parse_args()

if args.perturbation_data_n:
    par['perturbation_data_n'] = args.perturbation_data_n
if args.perturbation_data_bc:
    par['perturbation_data_bc'] = args.perturbation_data_bc
if args.label_key:
    par['label_key'] = args.label_key
if args.batch_key:
    par['batch_key'] = args.batch_key

print(par)

bulk_adata = ad.read_h5ad(par['perturbation_data_n'])
print(bulk_adata)

for norm_name in ['lognorm', 'pearson']:
    train = bulk_adata.copy()
    train.X = train.layers[norm_name]
    sc.pp.neighbors(train)
    sc.tl.umap(train)

    scgen.SCGEN.setup_anndata(train, batch_key=par['batch_key'], labels_key=par['label_key'])
    model = scgen.SCGEN(train)
    model.train(
        max_epochs=100,
        batch_size=64,
        early_stopping=True,
        early_stopping_patience=25,
    )

    corrected_adata = model.batch_removal()

    bulk_adata.layers[f'scgen_{norm_name}'] = corrected_adata.X
    print(f"{norm_name} finished batch correction")
bulk_adata.write_h5ad(par['perturbation_data_bc'])
VIASHMAIN
python -B "\$tempscript" &
wait "\$!"

VIASHEOF


# check whether required files exist
if [ ! -z "$VIASH_PAR_PERTURBATION_DATA_BC" ] && [ ! -e "$VIASH_PAR_PERTURBATION_DATA_BC" ]; then
  ViashError "Output file '$VIASH_PAR_PERTURBATION_DATA_BC' does not exist."
  exit 1
fi


exit 0
